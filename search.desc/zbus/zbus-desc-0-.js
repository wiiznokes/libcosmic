searchState.loadedDescShard("zbus", 0, "zbus\nA bus address\nInvalid D-Bus address.\nThis flag may be set on a method call message to inform …\nIndicates to the receiver that this client is prepared to …\nDoes not perform any authentication at all, and should not …\nThe method was found and will be completed by running this …\nAsync equivalent of <code>Drop</code>.\nAuthentication mechanisms\nAutolaunch address with optional scope\nThe D-Bus message is in big-endian (network) byte order.\nThe properties caching mode.\nA D-Bus connection.\nA builder for <code>zbus::Connection</code>.\nThis mechanism is designed to establish that a client has …\nA trait that needs to be implemented by error types to be …\nDerive macro for implementing <code>zbus::DBusError</code> trait.\nCode for <code>MessageField::Destinatione</code>\nThe name of the connection this message is intended for.\nA helper type returned by <code>Interface</code> callbacks.\nD-Bus code for endianness.\nContains the error value\nThe error type for <code>zbus</code>.\nAn error in response to a method call.\nCode for <code>MessageField::ErrorName</code>\nThe name of the error that occurred, for errors\nData too large.\nThis is the recommended authentication mechanism on …\nA <code>fdo::Error</code> transformed into <code>Error</code>.\nGeneric error.\nA D-Bus server GUID.\nInitial handshake error.\nEndian signature invalid or doesn’t match expectation.\nAn I/O error.\nThe trait used to dispatch messages to an interface …\nCode for <code>MessageField::Interface</code>\nThe interface to invoke a method call on, or that a signal …\nOpaque structure that derefs to an <code>Interface</code> type.\nOpaque structure that mutably derefs to an <code>Interface</code> type.\nInterface not found\nWrapper over an interface, along with its corresponding …\nInvalid message type. All unknown types on received …\nCode for <code>MessageField::Invalid</code>\nNot a valid field.\nInvalid message field.\nInvalid D-Bus GUID.\nInvalid match rule string.\nUnexpected or incorrect reply.\nAn I/O error.\nLaunchd address with a required env key\nCache properties but only populate the cache on the first …\nThe D-Bus message is in little-endian byte order.\nA bus match rule for subscribing to specific messages.\nBuilder for <code>MatchRule</code>.\nThe path or path namespace.\nCode for <code>MessageField::Member</code>\nThe member, either the method name or signal name.\nA D-Bus Message.\nA builder for <code>Message</code>\nThe dynamic message header.\nThe message field code.\nA collection of <code>MessageField</code> instances.\nPre-defined flags that can be passed in Message header.\nThe message header, containing all the metadata about the …\nThe primary message header, which is present in all D-Bus …\nA position in the stream of <code>Message</code> objects received by a …\nA <code>stream::Stream</code> implementation that yields <code>Message</code> items.\nMessage header representing the D-Bus type of the message.\nMethod call. This message type may prompt a reply (and …\nA D-Bus method error reply.\nFlags to use with <code>Proxy::call_with_flags</code>.\nA reply to a method call.\nA required field is missing in the message headers.\nA required parameter was missing.\nSignature of the target’s native endian.\nThe requested name was already claimed by another peer.\nA zbus_names error.\nDon’t cache properties.\nThe bus must not launch an owner for the destination name …\nWhen set on a call whose destination is a message bus, …\nThis message does not expect method return replies or …\nNo response is expected from this method call, regardless …\nTCP address details with nonce file path\nThis interface does not support the given method\nAn object server, holding server-side D-Bus objects &amp; …\nContains the success value\nOwned sibling of <code>MatchRule</code>.\nA <code>stream::Stream</code> implementation that yields <code>UniqueName</code> …\nCode for <code>MessageField::Path</code>\nThe object to send a call to, or the object a signal is …\nA property changed event.\nA <code>stream::Stream</code> implementation that yields property …\nA client-side interface proxy.\nBuilder for proxies.\nTrait for the default associated values of a proxy.\nCode for <code>MessageField::ReplySerial</code>\nThe serial number of the message this message is a reply …\nRetry with Interface::call_mut.\nA response wrapper that notifies after response has been …\nAlias for a <code>Result</code> with the error type <code>zbus::Error</code>.\nHelper trait for macro-generated code.\nCode for <code>MessageField::Sender</code>\nUnique name of the sending connection.\nSignal emission.\nA signal emission context.\nA <code>stream::Stream</code> implementation that yields signal messages…\nCode for <code>MessageField::Signature</code>\nThe signature of the message body.\nTrait representing some transport layer over which the …\nTCP address details\nA <code>tcp:</code> D-Bus address.\nA <code>tcp:</code> address family.\nA path on the filesystem\nCode for <code>MessageField::UnixFDs</code>\nThe number of Unix file descriptors that accompany the …\nUnsupported function, or support currently lacking.\nA zvariant error.\nCache properties. The properties will be cached upfront as …\nAppends a <code>MessageField</code> to the collection of fields in the …\nAppend an arguments.\nAppend a path argument.\nCreate a builder for connection that will use the given …\nAdd an argument of a specified index.\nMatch messages whose first argument is within the …\nSet 0th argument’s namespace.\nMatch messages whose first argument is within the …\nSet 0th argument’s namespace.\nAdd a path argument of a specified index.\nThe argument paths.\nThe arguments.\nGet a reference to the byte encoding of the message.\nReturns a string slice for the GUID.\nAssigns a serial number to <code>msg</code> that is unique to this …\nPerform the async cleanup.\nRegister a D-Bus <code>Interface</code> at a given path. (see the …\nSpecify the mechanisms to use during authentication.\nReturns the <code>tcp:</code> address <code>bind</code> value.\nThe blocking API.\nDeserialize the body using the contained signature.\nGet a reference to the byte encoding of the body of the …\nThe byte length of the message body.\nThe signature of the body.\nDeserialize the body (without checking signature matching).\nBuild the <code>Message</code> with the given body.\nBuild the connection, consuming the builder.\nBuild a proxy from the builder.\nBuild the <code>MatchRule</code>.\nCreate a new message from a raw slice of bytes to populate …\nCreate a builder for <code>MatchRuleBuilder</code>.\nSet the properties caching mode.\nGet the cached value of the property <code>property_name</code>.\nGet the cached value of the property <code>property_name</code>.\nCall a method.\nCall a method and return the reply body.\nSend a method call.\nCall a method and return the reply.\nCall a <code>&amp;mut self</code> method.\nCall a method without expecting a reply\nCall a method and return the reply body, optionally …\nSupports passing file descriptors.\nSupports passing file descriptors.\nClose the socket.\nGet the associated code for this field.\nGet a reference to the associated connection.\nGet a reference to the associated connection.\nThe cookie context to use during authentication.\nThe ID of the cookie to use during authentication.\nGenerate an error reply message for the given method call.\nAttribute macro for implementing a D-Bus interface.\nAttribute macro for defining D-Bus proxies (using …\nSet the name of the connection this message is intended …\nThe name of the connection this message is intended for.\nGet a reference to the destination service name.\nSet the proxy destination address.\nGet a reference to the associated destination (if any).\nThe destination, if set.\nSet the destination.\nEmit a signal.\nD-Bus code for bytorder encoding of the message.\nCreate a message of type <code>MessageType::Error</code>.\nThe name of the error that occurred, for errors.\nThe underlying executor.\nReturns the <code>tcp:</code> address <code>family</code> value.\nD-Bus standard interfaces.\nDeserialize the fields.\nGet a reference to the message fields.\nGet a mutable reference to the message fields.\nThe message flags.\nCreate a message stream for the given match rule.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a message from bytes.\nCreate a new signal context for the given connection and …\nParse a D-BUS address and return its path if we recognize …\nGenerate a D-Bus GUID that can be used with e.g. …\nGet a property value. Returns <code>None</code> if the property doesn’…\nGet a reference to the underlying interface.\nReturns a slice with all the <code>MessageField</code> in the message.\nReturn all the properties.\nGets a reference to a specific <code>MessageField</code> by its code.\nGet a reference to the underlying interface.\nGet the property <code>property_name</code>.\nDeserialize the header.\nReturns the <code>tcp:</code> address <code>host</code> value.\nGet a reference to the inner <code>MatchRule</code>.\nThe interface to invoke a method call on, or that a signal …\nSet the interface to invoke a method call on, or that a …\nThe interface to invoke a method call on, or that a signal …\nGet the interface at the given path.\nGet a reference to the interface.\nSet the proxy interface.\nThe interfac, if set.\nSet the interface.\nEnable or disable the internal executor thread.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>MessageFields</code> and returns a specific …\nGet the message fields, consuming <code>self</code>.\nConvert to the inner <code>MatchRule</code>, consuming <code>self</code>.\nCreates an owned clone of <code>self</code>.\nCreates an owned clone of <code>self</code>.\nCreates an owned clone of <code>self</code>.\nGet the primary header, consuming <code>self</code>.\nIntrospect the associated object, and return the XML …\nWrite introspection XML to the writer, with the given …\nChecks if <code>self</code> is a connection to a message bus.\nReturns <code>true</code> if there are no unfinished tasks.\nThe associated match rule, if any.\nMatch the given message against this rule.\nThe capacity of the main (unfiltered) queue.\nSet the capacity of the main (unfiltered) queue.\nThe maximum number of messages to queue for this stream.\nThe member, either the method name or signal name.\nSet the member, either the method name or signal name.\nThe member, either the method name or signal name.\nThe member name if set.\nSet the member.\nThe message type.\nThe message type\nCreate a message of type <code>MessageType::MethodCall</code>.\nCreate a message of type <code>MessageType::MethodCall</code>.\nCreate a message of type <code>MessageType::MethodError</code>.\nCreate a message of type <code>MessageType::MethodReturn</code>.\nCreate a message of type <code>MessageType::MethodReturn</code>.\nReturns a listener, notified on various connection …\nThe message type.\nThe message type, if set.\nSet the message type.\nReturn the name of the interface. Ex: “…\nThe bus name being tracked.\nRegister a well-known name for this connection on the bus.\nThe signal name.\nCreate a new <code>MessagePrimaryHeader</code> instance.\nCreate a new <code>MessageHeader</code> instance.\nCreates an empty collection of fields.\nCreate a new <code>NotifyResponse</code>.\nCreate a new <code>Proxy</code> for the given …\nCreate a new <code>ProxyBuilder</code> for the given connection.\nCreate a new signal context for the given connection and …\nHelper for creating the Async variant\nCreate a new <code>ProxyBuilder</code> for the given connection.\nCreate a new <code>Proxy</code> for the given …\nGet a reference to the associated <code>ObjectServer</code>.\nThe to-be-created connection will be a peer-to-peer …\nThe object to send a call to, or the object a signal is …\nSet the object to send a call to, or the object a signal …\nThe object to send a call to, or the object a signal is …\nGet a reference to the object path.\nSet the proxy path.\nGet a reference to the associated object path.\nSet the path.\nSet the path namespace.\nThe path or path namespace, if set.\nReturns the peer credentials.\nReturn the peer PID.\nReturn the peer PID.\nReturns the peer process ID, or Ok(None) if it cannot be …\nAttempt to receive a message from the socket.\nAttempt to send a message on the socket\nReturns the <code>tcp:</code> address <code>port</code> value.\nGet a reference to the primary header.\nGet a mutable reference to the primary header.\nThe major version of the protocol the message is compliant …\nCreate a stream for all signals emitted by this service.\nGet a stream to receive destination owner changed events.\nGet a stream to receive property changed events.\nCreate a stream for signal named <code>signal_name</code>.\nSame as <code>Proxy::receive_signal</code> but with a filter.\nGet the receive ordering of a message.\nDeregister a previously registered well-known name for …\nUnregister a D-Bus <code>Interface</code> at a given path.\nReplaces a <code>MessageField</code> from the collection of fields with …\nReply to a message.\nReply an error to a message.\nReply an error to a message.\nThe serial number of the message this message is a reply …\nThe serial number of the message this message is a reply …\nRegister a well-known name for this connection.\nRegister a well-known name for this connection.\nSend <code>msg</code> to the peer.\nSet the unique name of the sending connection.\nUnique name of the sending connection.\nThe sender, if set.\nSet the sender.\nThe serial number of the message (if set).\nRegister a D-Bus <code>Interface</code> to be served at a given path.\nThe to-be-created connection will be a server using the …\nThe server’s GUID.\nGet the address for session socket respecting the …\nCreate a <code>Connection</code> to the session/user message bus.\nCreate a builder for the session/user message bus …\nSet a property value.\nSet a property value.\nSet the byte length of the message body.\nSet the destination for the signal emission.\nSet the D-Bus code for bytorder encoding of the message.\nSet the message flags.\nSet the capacity of the main (unfiltered) queue.\nSet maximum number of messages to queue for this stream.\nSet the message type.\nSet a property value.\nSet the property <code>property_name</code>.\nSet the major version of the protocol the message is …\nSets the unique name of the connection (if not already …\nCreate a message of type <code>MessageType::Signal</code>.\nCreate a message of type <code>MessageType::Signal</code>.\nThe signature of the message body.\nCreate a builder for connection that will use the given …\nGet the address for system bus respecting the …\nCreate a <code>Connection</code> to the system-wide message bus.\nCreate a builder for the system-wide message bus …\nTake ownership of the associated file descriptors in the …\nCreate a builder for connection that will use the given …\nRuns a single task.\nCreates an owned clone of <code>self</code>.\nCreates an owned clone of <code>self</code>.\nCreates a GUID from a string with 32 hex digits.\nReturn the User ID, if any.\nReturn the User ID, if any.\nSpecify a set of properties (by name) which should be …\nThe unique name of the connection, if set/applicable.\nSets the unique name of the connection.\nThe number of Unix file descriptors that accompany the …\nCreate a builder for connection that will use the given …\nAdd flags to the message.\nA blocking wrapper of <code>zbus::Connection</code>.\nA builder for <code>zbus::blocking::Connection</code>.\nWrapper over an interface, along with its corresponding …\nA blocking wrapper of <code>crate::MessageStream</code>.\nA blocking wrapper of <code>crate::ObjectServer</code>.\nAn <code>std::iter::Iterator</code> implementation that yields owner …\nA property changed event.\nAn <code>std::iter::Iterator</code> implementation that yields property …\nA blocking wrapper of <code>crate::Proxy</code>.\nBuilder for proxies.\nAn <code>std::iter::Iterator</code> implementation that yields signal …\nCreate a builder for connection that will use the given …\nRegister a D-Bus <code>Interface</code> at a given path. (see the …\nSpecify the mechanisms to use during authentication.\nBuild the connection, consuming the builder.\nBuild a proxy from the builder.\nSet whether to cache properties.\nGet the cached value of the property <code>property_name</code>.\nGet the cached value of the property <code>property_name</code>.\nCall a method and return the reply body.\nSend a method call.\nCall a method and return the reply.\nCall a method without expecting a reply\nCall a method and return the reply body, optionally …\nGet a reference to the associated connection.\nThe cookie context to use during authentication.\nThe ID of the cookie to use during authentication.\nGet a reference to the destination service name.\nSet the proxy destination address.\nEmit a signal.\nD-Bus standard interfaces.\nCreate a message iterator for the given match rule.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a reference to the underlying interface.\nGet a reference to the underlying interface.\nGet the property <code>property_name</code>.\nGet a reference to the underlying async Connection.\nGet a reference to the underlying async message stream.\nGet a reference to the underlying async ObjectServer.\nGet a reference to the underlying async Proxy.\nGet the interface at the given path.\nGet a reference to the interface.\nSet the proxy interface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the underlying async Connection, consuming <code>self</code>.\nGet the underlying async message stream, consuming <code>self</code>.\nGet the underlying async ObjectServer, consuming <code>self</code>.\nGet the underlying async Proxy, consuming <code>self</code>.\nIntrospect the associated object, and return the XML …\nChecks if <code>self</code> is a connection to a message bus.\nThe associated match rule, if any.\nThe capacity of the main (unfiltered) queue.\nSet the capacity of the main (unfiltered) queue.\nReturns a listener, notified on various connection …\nGet the name of the property that changed.\nThe bus name being tracked.\nRegister a well-known name for this connection on the bus.\nThe signal name.\nCreate a new <code>Proxy</code> for the given …\nCreate a new <code>ProxyBuilder</code> for the given connection.\nCreate a new <code>ProxyBuilder</code> for the given connection.\nCreate a new <code>Proxy</code> for the given …\nGet a reference to the associated <code>ObjectServer</code>.\nThe to-be-created connection will be a peer-to-peer …\nGet a reference to the object path.\nSet the proxy path.\nReturns the peer credentials.\nCreate a stream for all signals emitted by this service.\nGet an iterator to receive property changed events.\nGet an iterator to receive owner changed events.\nCreate a stream for signal named <code>signal_name</code>.\nSame as <code>Proxy::receive_signal</code> but with a filter.\nDeregister a previously registered well-known name for …\nUnregister a D-Bus <code>Interface</code> at a given path.\nReply to a message.\nReply to a method call with an error.\nReply an error to a message.\nRegister a well-known name for this service on the bus.\nRegister a well-known name for this service on the bus.\nSend <code>msg</code> to the peer.\nRegister a D-Bus <code>Interface</code> to be served at a given path.\nThe to-be-created connection will be a server using the …\nThe server’s GUID.\nCreate a <code>Connection</code> to the session/user message bus.\nCreate a builder for the session/user message bus …\nSet the capacity of the main (unfiltered) queue.\nSet the property <code>property_name</code>.\nCreate a <code>Connection</code> to the system-wide message bus.\nCreate a builder for the system-wide message bus …\nCreate a builder for connection that will use the given …\nSpecify a set of properties (by name) which should be …\nThe unique name as assigned by the message bus or <code>None</code> if …\nSets the unique name of the connection.\nCreate a builder for connection that will use the given …\nProxy for the <code>org.freedesktop.DBus</code> interface.\nA <code>InterfacesAdded</code> signal.\n<code>InterfacesAdded</code> signal arguments.\nA <code>Iterator</code> implementation that yields <code>InterfacesAdded</code> …\nA <code>InterfacesRemoved</code> signal.\n<code>InterfacesRemoved</code> signal arguments.\nA <code>Iterator</code> implementation that yields <code>InterfacesRemoved</code> …\nProxy for the <code>org.freedesktop.DBus.Introspectable</code> …\nProxy for the <code>org.freedesktop.DBus.Monitoring</code> interface.\nA <code>NameAcquired</code> signal.\n<code>NameAcquired</code> signal arguments.\nA <code>Iterator</code> implementation that yields <code>NameAcquired</code> signals.\nA <code>NameLost</code> signal.\n<code>NameLost</code> signal arguments.\nA <code>Iterator</code> implementation that yields <code>NameLost</code> signals.\nA <code>NameOwnerChanged</code> signal.\n<code>NameOwnerChanged</code> signal arguments.\nA <code>Iterator</code> implementation that yields <code>NameOwnerChanged</code> …\nProxy for the <code>org.freedesktop.DBus.ObjectManager</code> interface.\nProxy for the <code>org.freedesktop.DBus.Peer</code> interface.\nA <code>PropertiesChanged</code> signal.\n<code>PropertiesChanged</code> signal arguments.\nA <code>Iterator</code> implementation that yields <code>PropertiesChanged</code> …\nProxy for the <code>org.freedesktop.DBus.Properties</code> interface.\nProxy for the <code>org.freedesktop.DBus.Debug.Stats</code> interface.\nAdds a match rule to match messages going through the …\nAdds a match rule to match messages going through the …\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nConverts the connection into a monitor connection which …\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nGet the cached value of the <code>Features</code> property, or <code>None</code> if …\nGet the cached value of the <code>Interfaces</code> property, or <code>None</code> …\nThis property lists abstract “features” provided by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to construct a PropertiesChanged from a ::zbus::Message…\nTry to construct a InterfacesAdded from a ::zbus::Message.\nTry to construct a InterfacesRemoved from a ::zbus::Message…\nTry to construct a NameOwnerChanged from a ::zbus::Message.\nTry to construct a NameLost from a ::zbus::Message.\nTry to construct a NameAcquired from a ::zbus::Message.\nGet a property value.\nReturns auditing data used by Solaris ADT, in an …\nGet all properties.\nGetAllMatchRules (undocumented)\nReturns as many credentials as possible for the process …\nReturns the security context used by SELinux, in an …\nGetConnectionStats (undocumented)\nReturns the Unix process ID of the process connected to …\nReturns the Unix user ID of the process connected to the …\nGets the unique ID of the bus.\nAn application should reply the containing a hex-encoded …\nThe return value of this method is a dict whose keys are …\nReturns the unique connection name of the primary owner of …\nGetStats (undocumented)\nReturns the unique name assigned to the connection.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThis property lists interfaces provided by the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nReturns an XML description of the object, including its …\nReturns a list of all names that can be activated on the …\nReturns a list of all currently-owned names on the bus.\nList the connections currently queued for a bus name.\nChecks if the specified name exists (currently has an …\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nOn receipt, an application should do nothing other than …\nCreate a stream for the <code>Features</code> property changes. This is …\nCreate a stream that receives <code>InterfacesAdded</code> signals.\nCreate a stream that receives <code>InterfacesAdded</code> signals.\nCreate a stream for the <code>Interfaces</code> property changes. This …\nCreate a stream that receives <code>InterfacesRemoved</code> signals.\nCreate a stream that receives <code>InterfacesRemoved</code> signals.\nCreate a stream that receives <code>NameAcquired</code> signals.\nCreate a stream that receives <code>NameAcquired</code> signals.\nCreate a stream that receives <code>NameLost</code> signals.\nCreate a stream that receives <code>NameLost</code> signals.\nCreate a stream that receives <code>NameOwnerChanged</code> signals.\nCreate a stream that receives <code>NameOwnerChanged</code> signals.\nCreate a stream that receives <code>PropertiesChanged</code> signals.\nCreate a stream that receives <code>PropertiesChanged</code> signals.\nAsk the message bus to release the method caller’s claim …\nReload server configuration.\nRemoves the first rule that matches.\nRemoves the first rule that matches.\nAsk the message bus to assign the given name to the method …\nSet a property value.\nTries to launch the executable associated with a name …\nThis method adds to or modifies that environment when …\nSecurity restrictions don’t allow doing what you’re …\nCan’t bind a socket since its address is in use (i.e. …\nAsked for ADT audit data and it wasn’t available.\nIf an application A specifies this flag and succeeds in …\nThe application trying to request ownership of a name is …\nAuthentication didn’t work.\nA D-Bus bus address was malformed.\nCredentials of a process connected to a bus server.\nProxy for the <code>org.freedesktop.DBus</code> interface.\nThe connection is disconnected and you’re trying to use …\nWithout this flag, if an application requests a name that …\nContains the error value\nErrors from …\nThe name already has an owner, <code>DoNotQueue</code> was specified, …\nA generic error; “something went wrong” - see the …\nExisting file and the operation you’re using does not …\nMissing file.\nSomething went wrong reading or writing to a socket, for …\nThe name already had an owner, <code>DoNotQueue</code> was not …\nThe message meta data does not match the payload. e.g. …\nThe message is not allowed without performing interactive …\nA <code>InterfacesAdded</code> signal.\n<code>InterfacesAdded</code> signal arguments.\nA <code>Stream</code> implementation that yields <code>InterfacesAdded</code> …\nA <code>InterfacesRemoved</code> signal.\n<code>InterfacesRemoved</code> signal arguments.\nA <code>Stream</code> implementation that yields <code>InterfacesRemoved</code> …\nProxy for the <code>org.freedesktop.DBus.Introspectable</code> …\nInvalid arguments passed to a method call.\nA file contains invalid syntax or is otherwise broken.\nA type signature is not valid.\nSome limited resource is exhausted.\nThe type returned by the …\nThe match rule isn’t syntactically valid.\nTried to remove or modify a match rule that didn’t exist.\nProxy for the <code>org.freedesktop.DBus.Monitoring</code> interface.\nA <code>NameAcquired</code> signal.\n<code>NameAcquired</code> signal arguments.\nA <code>Stream</code> implementation that yields <code>NameAcquired</code> signals.\nThe bus name you referenced doesn’t exist (i.e. no …\nA <code>NameLost</code> signal.\n<code>NameLost</code> signal arguments.\nA <code>Stream</code> implementation that yields <code>NameLost</code> signals.\nA <code>NameOwnerChanged</code> signal.\n<code>NameOwnerChanged</code> signal arguments.\nA <code>Stream</code> implementation that yields <code>NameOwnerChanged</code> …\nThere was not enough memory to complete an operation.\nNo network access (probably ENETUNREACH on a socket).\nNo reply to a message expecting one, usually means a …\nUnable to connect to server (probably caused by …\nThe given name does not exist on this bus.\nThe connection is not from a container, or the specified …\nThe caller was not the primary owner of this name, and was …\nRequested operation isn’t supported (like ENOSYS on …\nService-side Object Manager interface implementation.\nProxy for the <code>org.freedesktop.DBus.ObjectManager</code> interface.\nThere’s already an object with the requested object path.\nContains the success value\nProxy for the <code>org.freedesktop.DBus.Peer</code> interface.\nThe caller is now the primary owner of the name, replacing …\nServer-side implementation for the …\nA <code>PropertiesChanged</code> signal.\n<code>PropertiesChanged</code> signal arguments.\nA <code>Stream</code> implementation that yields <code>PropertiesChanged</code> …\nProxy for the <code>org.freedesktop.DBus.Properties</code> interface.\nProperty you tried to set is read-only.\nThe return code of the <code>release_name</code> method.\nThe caller has released their claim on the given name. …\nTry to replace the current owner if there is one. If this …\nThe flags used by the bus <code>request_name</code> method.\nThe return code of the <code>request_name</code> method.\nAlias for a <code>Result</code> with the error type <code>zbus::fdo::Error</code>.\nAsked for SELinux security context and it wasn’t …\nThe bus doesn’t know how to launch a service to supply …\nWhile starting a new process, the child exited with a …\nWhile starting a new process, the child exited on a signal.\nWe failed to setup the config parser correctly.\nWhile starting a new process, the exec() call failed.\nWhile starting a new process, something went wrong.\nWe failed to setup the environment correctly.\nService file invalid (Name, User or Exec missing).\nWhile starting a new process, the fork() call failed.\nThere was not enough memory to complete the operation.\nPermissions are incorrect on the setuid helper.\nService file not found in system-services directory.\nBus name was not valid.\nProxy for the <code>org.freedesktop.DBus.Debug.Stats</code> interface.\nCertain timeout errors, e.g. while starting a service.\nCertain timeout errors, possibly ETIMEDOUT on a socket. …\nTried to get a UNIX process ID and it wasn’t available.\nInterface you invoked a method on isn’t known by the …\nMethod name you invoked isn’t known by the object you …\nObject you invoked a method on isn’t known.\nProperty you tried to access isn’t known by the object.\nUnknown or fall-through ZBus error.\nAdds a match rule to match messages going through the …\nAdds a match rule to match messages going through the …\nAdd a numeric Unix group ID.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nRetrieve the signal arguments.\nConverts the connection into a monitor connection which …\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nReturns a customizable builder for this proxy.\nGet the cached value of the <code>Features</code> property, or <code>None</code> if …\nGet the cached value of the <code>Interfaces</code> property, or <code>None</code> …\nThis property lists abstract “features” provided by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to construct a PropertiesChanged from a ::zbus::Message…\nTry to construct a InterfacesAdded from a ::zbus::Message.\nTry to construct a InterfacesRemoved from a ::zbus::Message…\nTry to construct a NameOwnerChanged from a ::zbus::Message.\nTry to construct a NameLost from a ::zbus::Message.\nTry to construct a NameAcquired from a ::zbus::Message.\nGet a property value.\nReturns auditing data used by Solaris ADT, in an …\nGet all properties.\nGetAllMatchRules (undocumented)\nReturns as many credentials as possible for the process …\nReturns the security context used by SELinux, in an …\nGetConnectionStats (undocumented)\nReturns the Unix process ID of the process connected to …\nReturns the Unix user ID of the process connected to the …\nGets the unique ID of the bus.\nAn application should reply the containing a hex-encoded …\nThe return value of this method is a dict whose keys are …\nReturns the unique connection name of the primary owner of …\nGetStats (undocumented)\nReturns the unique name assigned to the connection.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::Proxy</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThe reference to the underlying <code>zbus::#signal_type</code>.\nThis property lists interfaces provided by the …\nThis signal is emitted when either a new object is added …\nThis signal is emitted whenever an object is removed or it …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::Proxy</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nConsumes <code>self</code>, returning the underlying <code>zbus::#signal_type</code>.\nSame as <code>ConnectionCredentials::linux_security_label</code>, but …\nSame as <code>ConnectionCredentials::unix_group_ids</code>, but …\nSame as <code>ConnectionCredentials::windows_sid</code>, but consumes …\nReturns an XML description of the object, including its …\nOn Linux systems, the security label that would result …\nReturns a list of all names that can be activated on the …\nReturns a list of all currently-owned names on the bus.\nList the connections currently queued for a bus name.\nChecks if the specified name exists (currently has an …\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nCreates a new proxy with the default service and path.\nOn receipt, an application should do nothing other than …\nThe numeric process ID, on platforms that have this …\nEmits the <code>org.freedesktop.DBus.Properties.PropertiesChanged</code>…\nCreate a stream for the <code>Features</code> property changes. This is …\nCreate a stream that receives <code>InterfacesAdded</code> signals.\nCreate a stream that receives <code>InterfacesAdded</code> signals.\nCreate a stream for the <code>Interfaces</code> property changes. This …\nCreate a stream that receives <code>InterfacesRemoved</code> signals.\nCreate a stream that receives <code>InterfacesRemoved</code> signals.\nCreate a stream that receives <code>NameAcquired</code> signals.\nCreate a stream that receives <code>NameAcquired</code> signals.\nCreate a stream that receives <code>NameLost</code> signals.\nCreate a stream that receives <code>NameLost</code> signals.\nCreate a stream that receives <code>NameOwnerChanged</code> signals.\nCreate a stream that receives <code>NameOwnerChanged</code> signals.\nCreate a stream that receives <code>PropertiesChanged</code> signals.\nCreate a stream that receives <code>PropertiesChanged</code> signals.\nAsk the message bus to release the method caller’s claim …\nReload server configuration.\nRemoves the first rule that matches.\nRemoves the first rule that matches.\nAsk the message bus to assign the given name to the method …\nSet a property value.\nSet the Linux security label.\nSet the numeric process ID, on platforms that have this …\nSet the numeric Unix user ID, as defined by POSIX.\nSet the Windows security identifier in its string form.\nTries to launch the executable associated with a name …\nThe numeric Unix group IDs (including both the primary …\nThe numeric Unix user ID, as defined by POSIX.\nThis method adds to or modifies that environment when …\nThe Windows security identifier in its string form, e.g. …")