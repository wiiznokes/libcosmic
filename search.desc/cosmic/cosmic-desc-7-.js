searchState.loadedDescShard("cosmic", 7, "Stream for the <code>into_stream</code> method.\nValues yielded by the stream.\nStream for the <code>iter</code> function.\nPoll the first stream.\n<code>BoxStream</code>, but without the <code>Send</code> requirement.\nStream for the <code>map</code> method.\nStream for the <code>map_err</code> method.\nStream for the <code>map_ok</code> method.\nFuture for the <code>next</code> method.\nFuture for the <code>Peekable::next_if</code> method.\nFuture for the <code>Peekable::next_if_eq</code> method.\nThe type of successful values yielded by this future\nA stream which emits single element and then EOF.\nStream for the <code>or_else</code> method.\nFuture for the <code>Peekable::peek</code> method.\nFuture for the <code>Peekable::peek_mut</code> method.\nA <code>Stream</code> that implements a <code>peek</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn</code> function.\nStream for the poll_immediate function.\nType to tell <code>SelectWithStrategy</code> which stream to poll next.\nStream for the <code>ready_chunks</code> method.\nStream for the <code>repeat</code> function.\nAn stream that repeats elements of type <code>A</code> endlessly by …\nError indicating a <code>SplitSink&lt;S&gt;</code> and <code>SplitStream&lt;S&gt;</code> were …\nPoll the second stream.\nStream for the <code>scan</code> method.\nStream for the <code>select()</code> function.\nAn unbounded set of streams\nFuture for the <code>select_next_some</code> method.\nStream for the <code>select_with_strategy()</code> function. See …\nStream for the <code>skip</code> method.\nStream for the <code>skip_while</code> method.\nA <code>Sink</code> part of the split pair\nA <code>Stream</code> part of the split pair\nA stream of values produced asynchronously.\nAn extension trait for <code>Stream</code>s that provides a variety of …\nFuture for the <code>into_future</code> method.\nStream for the <code>take</code> method.\nStream for the <code>take_until</code> method.\nStream for the <code>take_while</code> method.\nStream for the <code>then</code> method.\nFuture for the <code>try_all</code> method.\nFuture for the <code>try_any</code> method.\nStream for the <code>try_buffer_unordered</code> method.\nStream for the <code>try_buffered</code> method.\nStream for the <code>try_chunks</code> method.\nError indicating, that while chunk was collected inner …\nFuture for the <code>try_collect</code> method.\nFuture for the <code>try_concat</code> method.\nStream for the <code>try_filter</code> method.\nStream for the <code>try_filter_map</code> method.\nStream for the <code>try_flatten</code> method.\nStream for the <code>try_flatten_unordered</code> method.\nFuture for the <code>try_fold</code> method.\nFuture for the <code>try_for_each</code> method.\nFuture for the <code>try_for_each_concurrent</code> method.\nFuture for the <code>try_next</code> method.\nStream for the <code>try_ready_chunks</code> method.\nError indicating, that while chunk was collected inner …\nStream for the <code>try_skip_while</code> method.\nA convenience for streams that return <code>Result</code> values that …\nAdapters specific to <code>Result</code>-returning streams\nStream for the <code>try_take_while</code> method.\nStream for the <code>try_unfold</code> function.\nStream for the <code>unfold</code> function.\nFuture for the <code>unzip</code> method.\nStream for the <code>zip</code> method.\nCreates a new <code>Abortable</code> stream and an <code>AbortHandle</code> which …\nCreates a stream which contains no elements.\nAn unbounded set of futures.\nReturns <code>true</code> if the stream should no longer be polled.\nConverts an <code>Iterator</code> into a <code>Stream</code> which is always ready …\nCreates a stream of a single element.\nCreates a stream which never returns any elements.\nCreates a new stream wrapping a function returning …\nCreates a new stream that always immediately returns …\nAttempt to pull out the next value of this stream, …\nCreate a stream which produces the same item repeatedly.\nCreates a new stream that repeats elements of type <code>A</code> …\nThis function will attempt to pull items from both …\nAn unbounded set of streams\nConvert a list of streams into a <code>Stream</code> of results from …\nThis function will attempt to pull items from both …\nPoll this <code>TryStream</code> as if it were a <code>Stream</code>.\nCreates a <code>TryStream</code> from a seed and a closure returning a …\nCreates a <code>Stream</code> from a seed and a closure returning a …\nA set of futures which may complete in any order.\nOwned iterator over all futures in the unordered set.\nImmutable iterator over all the futures in the unordered …\nMutable iterator over all futures in the unordered set.\nMutable iterator over all futures in the unordered set.\nImmutable iterator over all futures in the unordered set.\nOwned iterator over all streams in the unordered set.\nImmutable iterator over all streams in the unordered set.\nMutable iterator over all streams in the unordered set.\nAn unbounded set of streams\nConvert a list of streams into a <code>Stream</code> of results from …\nA way of waking up a specific task.\nA synchronization primitive for task wakeup.\nThe context of an asynchronous task.\nA custom trait object for polling futures, roughly akin to …\nA custom trait object for polling futures, roughly akin to …\nThe <code>LocalSpawn</code> is similar to <code>Spawn</code>, but allows spawning …\nExtension trait for <code>LocalSpawn</code>.\nRepresents that a value is not ready yet.\nIndicates whether a value is available or if the current …\nA <code>RawWaker</code> allows the implementor of a task executor to …\nA virtual function pointer table (vtable) that specifies …\nRepresents that a value is immediately ready.\nThe <code>Spawn</code> trait allows for pushing futures onto an …\nAn error that occurred during spawning.\nExtension trait for <code>Spawn</code>.\nA custom implementation of a future trait object for …\nA <code>Waker</code> is a handle for waking up a task by notifying its …\nA <code>Waker</code> that is only valid for a given lifetime.\nDrops the future represented by the given fat pointer.\nConvert an owned instance into a (conceptually owned) fat …\nCreate a new <code>Waker</code> which does nothing when <code>wake()</code> is …\nGet a static reference to a <code>Waker</code> which does nothing when …\nSpawns a future that will be run to completion.\nSpawns a future that will be run to completion.\nIndicates that the associated task is ready to make …\nCreates a <code>Waker</code> from an <code>Arc&lt;impl ArcWake&gt;</code>.\nCreates a reference to a <code>Waker</code> from a reference to …\nListens to keyboard key presses and calls the given …\nListens to keyboard key releases and calls the given …\nCreates a new <code>Stream</code> that produces the items sent from a …\nCreates a new <code>Stream</code> that produces the items sent from a …\nA subscription event.\nA stream of runtime events.\nThe hasher used for identifying subscriptions.\nA user interacted with a user interface in a window.\nThe events that will be produced by a <code>Subscription</code> with …\nThe description of a <code>Subscription</code>.\nA request to listen to external events.\nA registry of subscription streams.\nCreates a <code>Subscription</code> from a <code>Recipe</code> describing it.\nHashes the <code>Recipe</code>.\nReturns the different recipes of the <code>Subscription</code>.\nExecutes the <code>Recipe</code> and produces the stream of events of …\nThe <code>Event</code> describing the interaction.\nThe <code>event::Status</code> of the interaction.\nThe window holding the interface of the interaction.\nA bevelled corner.\nThe stroke for each sub-path does not extend beyond its …\nA simple cache that stores generated geometry to avoid …\nThe style used to fill geometry.\nThe region of a surface that can be used to draw geometry.\nThe kind of <code>Frame</code> this renderer supports.\nThe kind of geometry this renderer can draw.\nA fill which linearly interpolates colors along a …\nA <code>Gradient</code> color.\nA raster image that can be drawn.\nThe shape used at the end of open subpaths when they are …\nThe dash pattern used when stroking the line.\nThe shape used at the corners of paths or basic shapes …\nA linear gradient interpolates colors along a direction …\nA sharp corner.\nAn immutable set of points that may or may not be …\nA renderer capable of drawing some <code>Self::Geometry</code>.\nAt the end of each sub-path, the shape representing the …\nA round corner.\nA solid <code>Color</code>.\nAt the end of each sub-path, the shape representing the …\nThe style of a stroke.\nThe coloring style of some drawing.\nA raster image that can be drawn.\nA bunch of text that can be drawn to a canvas\nThe border radii of the image\nThe border radius for the svg\nReturns the coordinate of the center of the <code>Frame</code>.\nClears the <code>Cache</code>, forcing a redraw the next time it is …\nThe color of the text\nThe <code>Color</code> filter to be applied to the <code>Svg</code>.\nThe contents of the text\nDraws geometry using the provided closure and stores it in …\nDraws the given <code>Self::Geometry</code>.\nDraws the given <code>Image</code> on the <code>Frame</code> inside the given bounds.\nDraws the given <code>Svg</code> on the <code>Frame</code> inside the given bounds.\nFill <code>Geometry</code> with a certain style.\nDraws the given <code>Path</code> on the <code>Frame</code> by filling it with the …\nDraws an axis-aligned rectangle given its top-left corner …\nDraws the characters of the given <code>Text</code> on the <code>Frame</code>, …\nThe filter method of the image.\nThe font of the text\nDraw and generate geometry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe handle of the image.\nThe handle of the <code>Svg</code>.\nReturns the height of the <code>Frame</code>.\nThe horizontal alignment of the text\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurns the <code>Frame</code> into its underlying geometry.\nThe shape to be used at the end of open subpaths when they …\nThe dash pattern used when stroking the line.\nThe line height of the text.\nThe shape to be used at the corners of paths or basic …\nCreates a new <code>Frame</code> with the given dimensions.\nCreates a new empty <code>Cache</code>.\nCreates a new <code>Self::Frame</code>.\nThe offset of <code>LineDash::segments</code> to start the pattern.\nThe opacity of the image.\nThe opacity of the <code>Svg</code>.\nBuild different kinds of 2D shapes.\nPops a transform from the transform stack and sets it as …\nThe position of the text relative to the alignment …\nPushes the current transform in the transform stack.\nApplies a rotation in radians to the current transform of …\nThe rotation to be applied to the image; on its center.\nThe rotation to be applied to the image; on its center.\nThe fill rule defines how to determine what is inside and …\nApplies a uniform scaling to the current transform of the …\nApplies a non-uniform scaling to the current transform of …\nThe alternating lengths of lines and gaps which describe …\nThe shaping strategy of the text.\nReturns the dimensions of the <code>Frame</code>.\nThe size of the text\nIf set to <code>true</code>, the image will be snapped to the pixel …\nCreate lines from a <code>Path</code> and assigns them various …\nDraws the stroke of the given <code>Path</code> on the <code>Frame</code> with the …\nDraws the stroke of an axis-aligned rectangle with the …\nThe color or gradient of the fill.\nThe color or gradient of the stroke.\nApplies a translation to the current transform of the <code>Frame</code>…\nThe vertical alignment of the text\nReturns the width of the <code>Frame</code>.\nThe distance between the two edges of the stroke.\nExecutes the given drawing operations within a <code>Rectangle</code> …\nCreates a new empty <code>Cache</code> with the given <code>Group</code>.\nStores the current transform of the <code>Frame</code> and executes the …\nThe style used to fill geometry.\nA <code>Gradient</code> color.\nThe fill rule defines how to determine what is inside and …\nA solid <code>Color</code>.\nThe coloring style of some drawing.\nThe fill rule defines how to determine what is inside and …\nThe color or gradient of the fill.\nThe internal implementation of a <code>Frame</code>.\nThe region of a surface that can be used to draw geometry.\nA segment of a differentiable curve.\nA <code>Path</code> builder.\nAn immutable set of points that may or may not be …\nBuild and draw curves.\nThe center of the arc.\nThe end of the segment’s angle, clockwise rotation from …\nThe radius of the arc.\nThe start of the segment’s angle, clockwise rotation …\nA segment of a differentiable curve.\nAn elliptical <code>Arc</code>.\nThe center of the arc.\nThe center of the arc.\nThe end of the segment’s angle, clockwise rotation from …\nThe end of the segment’s angle, clockwise rotation from …\nThe radii of the arc’s ellipse. The horizontal and …\nThe radius of the arc.\nThe clockwise rotation of the arc’s ellipse.\nThe start of the segment’s angle, clockwise rotation …\nThe start of the segment’s angle, clockwise rotation …\nFlag parameters for arcs as described by the SVG …\nAn alias for <code>usize</code>.\nA view over a contiguous storage of custom attributes.\nInterface for objects storing custom attributes associated …\nAn alias for a slice of <code>f32</code> values.\nA beveled corner is to be used to join path segments. The …\nThe default builder for <code>Path</code>.\nA builder for <code>Path</code> with custom attributes.\nThe stroke for each sub-path does not extend beyond its …\nID of a control point in a path.\nID of an endpoint point in a path.\nRepresents an event or edge of path.\nRefers to an event in a path.\nThe fill rule defines how to determine what is inside and …\nA path event representing endpoints and control points as …\nAn iterator of endpoint and control point ids for <code>Path</code> and …\nA view over a sequence of endpoint IDs forming a polygon.\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nLine cap as defined by the SVG specification.\nLine join as defined by the SVG specification.\nA sharp corner is to be used to join path segments.\nSame as a miter join, but if the miter limit is exceeded, …\nAn empty attribute slice.\nA simple path data structure.\nAn object that stores multiple paths contiguously.\nA view on a <code>PathBuffer</code>.\nThe commands of a path encoded in a single array using IDs …\nA view over <code>PathCommands</code>.\nA path event representing endpoints and control points as …\nA view on a <code>Path</code>.\nA view over a sequence of endpoints forming a polygon.\nInterface for types types (typically endpoints and control …\nInterface for objects storing endpoints and control points …\nAn iterator of over a <code>Path</code> traversing the path in reverse.\nAt each end of each sub-path, the shape representing the …\nA round corner is to be used to join path segments.\nThe positive or negative side of a vector or segment.\nAt the end of each sub-path, the shape representing the …\nThe two possible orientations for the edges of a shape to …\nPath building utilities.\nA generic representation for paths that allow more control …\nReturns the endpoint’s custom attributes as a slice of …\nTools to iterate over paths.\nOf the four candidate arc sweeps, two will represent an …\nf32 version of the lyon_geom types used everywhere. Most …\nReturns the number of float attributes per endpoint.\nThe default path data structure.\nA container to store multiple paths contiguously.\nSpecific path types for polygons.\nIf <code>sweep</code> is <code>true</code>, then the arc will be drawn in a “…\n<code>lyon_path</code> traits reexported here for convenience.\nThe radius of each corner of a rounded rectangle.\nBuilds a path.\nA Builder that approximates curves with successions of …\nA convenience wrapper for <code>PathBuilder</code> without custom …\nThe base path building interface.\nThe type of object that is created by this builder.\nA path building interface that tries to stay close to SVG…\nBuilds a path with a transformation applied.\nImplements an SVG-like building interface on top of a …\nAdds an elliptical arc.\nStarts a new sub-path at a given position.\nBuilds a path object, consuming the builder.\nEnds the current sub-path by connecting it back to its …\nAdds a cubic bézier curve to the current sub-path.\nAdds a cubic bézier segment to the current sub-path.\nEnds the current sub path.\nAdds an horizontal line segment.\nAdds a line segment to the current sub-path.\nAdds a line segment to the current sub-path.\nStart a new sub-path at the given position.\nAdds a quadratic bézier curve to the current sub-path.\nAdds a quadratic bézier segment to the current sub-path.\nEquivalent to <code>arc_to</code> in relative coordinates.\nEquivalent to <code>cubic_bezier_to</code> in relative coordinates.\nAdds an horizontal line segment in relative coordinates.\nEquivalent to <code>line_to</code> in relative coordinates.\nEquivalent to <code>move_to</code> in relative coordinates.\nEquivalent to <code>quadratic_bezier_to</code> in relative coordinates.\nAdds a vertical line segment in relative coordinates.\nEquivalent to <code>cubic_bezier_to</code> with implicit first control …\nEquivalent to <code>quadratic_bezier_to</code> with implicit control …\nEquivalent to <code>smooth_cubic_bezier_to</code> in relative …\nEquivalent to <code>smooth_quadratic_bezier_to</code> in relative …\nAdds a vertical line segment.\nA view on a <code>PathCommands</code> buffer and two slices for …\nAn iterator of <code>Event&lt;&amp;Endpoint, &amp;ControlPoint&gt;</code>.\nAn iterator of <code>Event&lt;&amp;Endpoint, &amp;ControlPoint&gt;</code>.\nThe commands of a path encoded in a single array using IDs …\nBuilds path commands.\nA view over <code>PathCommands</code>.\nAn iterator of <code>PathEvent</code>.\nAn angle in radians\nAn elliptic arc curve segment.\nFlag parameters for arcs as described by the SVG …\nA 2d curve segment defined by four points: the beginning …\nAn infinite line defined by a point and a vector.\nA line defined by the equation …\nA linear segment.\nA 2d curve segment defined by three points: the beginning …\nAlias for <code>euclid::default::Rotation2D</code>\nCommon APIs to segment types.\nAn elliptic arc curve segment using the SVG’s end-point …\nAlias for <code>euclid::default::Transform2D</code>\nAlias for <code>euclid::default::Translation2D</code>\nA 2D triangle defined by three points <code>a</code>, <code>b</code> and <code>c</code>.\nReturn the curve after the split point.\nAngle in radians\nCompute the length of the segment using a flattened …\nElliptic arc related maths and tools.\nReturn the curve before the split point.\nSample the derivative at t (expecting t between 0 and 1).\nSwap the direction of the segment.\nApproximates the curve with sequence of line segments.\nStart of the curve.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nOf the four candidate arc sweeps, two will represent an …\nShorthand for <code>Point::new(x, y)</code>.\nSample the curve at t (expecting t between 0 and 1).\nShorthand for <code>Size::new(x, y)</code>.\nSplit this curve into two sub-curves.\nReturn the curve inside a given range of t.\nIf <code>sweep</code> is <code>true</code>, then the arc will be drawn in a “…\nEnd of the curve.\nShorthand for <code>Vector::new(x, y)</code>.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nAn elliptic arc curve segment.\nFlag parameters for arcs as described by the SVG …\nFlattening iterator for arcs.\nAn elliptic arc curve segment using the SVG’s end-point …\nOf the four candidate arc sweeps, two will represent an …\nIf <code>sweep</code> is <code>true</code>, then the arc will be drawn in a “…\nA string with a fixed capacity.\nA vector with a fixed capacity.\nError value indicating insufficient capacity\nA draining iterator for <code>ArrayVec</code>.\nBy-value iterator for <code>ArrayVec</code>.\nA 2d curve segment defined by four points: the beginning …\nAn angle in radians\nA 2d vector of booleans, useful for component-wise logic …\nA 3d vector of booleans, useful for component-wise logic …\nA 2d axis aligned rectangle represented by its minimum and …\nAn axis aligned 3D box represented by its minimum and …\nHomogeneous vector in 3D space.\nA one-dimensional distance, with value represented by <code>T</code> …\nA 2d Point tagged with a unit.\nA 3d Point tagged with a unit.\nA 2d Rectangle optionally tagged with a unit.\nA rigid transformation. All lengths are preserved under …\nA transform that can represent rotations in 2d, …\nA transform that can represent rotations in 3d, …\nA scaling factor between two different units of …\nA group of 2D side offsets, which correspond to …\nA 2d size tagged with a unit.\nA 3d size tagged with a unit.\nA 2d transform represented by a column-major 3 by 3 …\nA 3d transform stored as a column-major 4 by 4 matrix.\nA 2d transformation from a space to another that can only …\nA 3d transformation from a space to another that can only …\nTrait for basic trigonometry functions, so they can be …\nThe default unit.\nA 2d Vector tagged with a unit.\nA 3d Vector tagged with a unit.\nAngle in radians\nUtilities for testing approximate ordering - especially …\nShorthand for …\nShorthand for <code>BoolVector2D { x, y }</code>.\nShorthand for <code>BoolVector3D { x, y, z }</code>.\nA set of aliases for all types, tagged with the default …\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nA one-dimensional length, tagged with its units.\nShorthand for <code>Point2D::new(x, y)</code>.\nShorthand for <code>Point3D::new(x, y)</code>.\nThe real part.\nShorthand for …\nShorthand for <code>Size2D::new(w, h)</code>.\nShorthand for <code>Size3D::new(w, h, d)</code>.\nConvenience constructor.\nConvenience constructor.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nTrait for testing approximate equality\nDefault epsilon value\nReturns <code>true</code> if this object is approximately equal to the …\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nThe real part.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nDefines the smallest integer equal or greater than the …\nDefines the biggest integer equal or lower than the …\nDefines the nearest integer value to the original value.\nRounds to the smallest integer equal or greater than the …\nRounds to the biggest integer equal or lower than the …\nRounds to the nearest integer value.\nA flattening iterator for quadratic bézier segments.\nA flattening iterator for quadratic bézier segments.\nA 2d curve segment defined by three points: the beginning …\nCommon APIs to segment types.\nReturn the curve after the split point.\nCompute the length of the segment using a flattened …\nReturn the curve before the split point.\nSample the derivative at t (expecting t between 0 and 1).\nSwap the direction of the segment.\nApproximates the curve with sequence of line segments.\nStart of the curve.\nSample the curve at t (expecting t between 0 and 1).\nSplit this curve into two sub-curves.\nReturn the curve inside a given range of t.\nEnd of the curve.\nAngle between vectors v1 and v2 (oriented clockwise …\nAn iterator that consumes <code>Event</code> iterator and yields …\nAn iterator that consumes an iterator of <code>Point</code>s and …\nAn extension trait for <code>PathEvent</code> iterators.\nApplies a 2D transform to a path iterator and yields the …\nAn angle in radians (f32).\nAlias for <code>euclid::default::Box2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Point2D&lt;f32&gt;</code>.\nAlias for <code>euclid::default::Rotation2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Scale&lt;f32&gt;</code>\nAlias for <code>euclid::default::Size2D&lt;f32&gt;</code>.\nAlias for <code>euclid::default::Transform2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Translation2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Point2D&lt;f32&gt;</code>.\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nShorthand for <code>Point::new(x, y)</code>.\nShorthand for <code>Size::new(x, y)</code>.\nShorthand for <code>Vector::new(x, y)</code>.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe default builder for <code>Path</code>.\nA builder for <code>Path</code> with custom attributes.\nAn iterator of endpoint and control point ids for <code>Path</code> and …\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nA simple path data structure.\nA view on a <code>Path</code>.\nAn iterator of over a <code>Path</code> traversing the path in reverse.\nA Builder that appends a path to an existing PathBuffer.\nA Builder that appends a path to an existing PathBuffer, …\nIterator over the paths in a <code>PathBufferSlice</code>.\nAn object that stores multiple paths contiguously.\nA view on a <code>PathBuffer</code>.\nA view over a sequence of endpoint IDs forming a polygon.\nAn iterator of <code>Event&lt;EndpointId, ()&gt;</code>.\nAn iterator of <code>PathEvent</code>.\nA view over a sequence of endpoints forming a polygon.\nAn iterator of <code>IdEvent</code> for <code>Polygon</code>.\nAn iterator of <code>Event&lt;&amp;Endpoint, ()&gt;</code>.\nBuilds a path.\nThe base path building interface.\nAn extension trait for <code>PathEvent</code> iterators.\nThe type of object that is created by this builder.\nA path building interface that tries to stay close to SVG…\nAdds an elliptical arc.\nStarts a new sub-path at a given position.\nBuilds a path object, consuming the builder.\nEnds the current sub-path by connecting it back to its …\nAdds a cubic bézier curve to the current sub-path.\nAdds a cubic bézier segment to the current sub-path.\nEnds the current sub path.\nAdds an horizontal line segment.\nAdds a line segment to the current sub-path.\nAdds a line segment to the current sub-path.\nStart a new sub-path at the given position.\nAdds a quadratic bézier curve to the current sub-path.\nAdds a quadratic bézier segment to the current sub-path.\nEquivalent to <code>arc_to</code> in relative coordinates.\nEquivalent to <code>cubic_bezier_to</code> in relative coordinates.\nAdds an horizontal line segment in relative coordinates.\nEquivalent to <code>line_to</code> in relative coordinates.\nEquivalent to <code>move_to</code> in relative coordinates.\nEquivalent to <code>quadratic_bezier_to</code> in relative coordinates.\nAdds a vertical line segment in relative coordinates.\nEquivalent to <code>cubic_bezier_to</code> with implicit first control …\nEquivalent to <code>quadratic_bezier_to</code> with implicit control …\nEquivalent to <code>smooth_cubic_bezier_to</code> in relative …\nEquivalent to <code>smooth_quadratic_bezier_to</code> in relative …\nAdds a vertical line segment.\nA bevelled corner.\nThe stroke for each sub-path does not extend beyond its …\nA <code>Gradient</code> color.\nThe shape used at the end of open subpaths when they are …\nThe dash pattern used when stroking the line.\nThe shape used at the corners of paths or basic shapes …\nA sharp corner.\nAt the end of each sub-path, the shape representing the …\nA round corner.\nA solid <code>Color</code>.\nAt the end of each sub-path, the shape representing the …\nThe style of a stroke.\nThe coloring style of some drawing.\nThe shape to be used at the end of open subpaths when they …\nThe dash pattern used when stroking the line.\nThe shape to be used at the corners of paths or basic …\nThe offset of <code>LineDash::segments</code> to start the pattern.\nThe alternating lengths of lines and gaps which describe …\nThe color or gradient of the stroke.\nThe distance between the two edges of the stroke.\nA fill which linearly interpolates colors along a …\nA linear gradient.\nA linear gradient interpolates colors along a direction …\nPacked <code>Gradient</code> data for use in shader code.\nThe absolute ending position of the gradient.\nCreates a new <code>Packed</code> gradient for use in shader code.\nThe absolute starting position of the gradient.\n<code>ColorStop</code>s along the linear gradient direction.\nA raster or vector image.\nA raster image.\nA vector image.\nTries to load an image by its <code>Handle</code>.\nThe bounds of the image.\nThe bounds of the image.\nThe image handle\nThe handle of a vector image.\nPixel is 8-bit alpha\n<code>AnimationDecoder</code> trait\nAn Image in AVIF Format\nPixel contains 8-bit B, G and R channels\nPixel is 8-bit BGR with an alpha channel\nAn Image in BMP Format\nThe number of channels of this pixel type.\nA string that can help to interpret the meaning each …\nThis pixel has the format of one of the predefined …\nPixel is 8-bit CMYK\nAn enumeration over supported color types and bit depths\nThe maximum value for this type of primitive within the …\nThe minimum value for this type of primitive within the …\nAn Image in DDS Format\nAn error was encountered while decoding.\nThe delay of a frame relative to the previous one.\nA Dynamic Image\nTypes which are safe to treat as an immutable byte slice …\nAn error was encountered while encoding.\nContains the error value\nAn enumeration of color types encountered in image formats.\nAn Image in farbfeld Format\nA flat buffer over a (multi channel) image.\nA single animation frame\nAn implementation dependent iterator, reading the frames …\nA trait for manipulating images.\nTrait to inspect an image.\nAn Image in GIF Format\nSendable grayscale + alpha channel image buffer\nSendable grayscale image buffer\nAn Image in Radiance HDR Format\nAn Image in ICO Format\nGeneric image buffer\nThe trait that all decoders implement\nSpecialized image decoding not be supported by all formats\nThe trait all encoders implement\nThe generic error type for image operations.\nAn enumeration of supported image formats. Not all formats …\nEach pixel in this image is 16-bit Luma\nEach pixel in this image is 8-bit Luma\nEach pixel in this image is 16-bit Luma with alpha\nEach pixel in this image is 8-bit Luma with alpha\nA multi-format image reader.\nResult of an image decoding/encoding process\nEach pixel in this image is 16-bit Rgb\nEach pixel in this image is 32-bit float Rgb\nEach pixel in this image is 8-bit Rgb\nEach pixel in this image is 16-bit Rgb with alpha\nEach pixel in this image is 32-bit float Rgb with alpha\nEach pixel in this image is 8-bit Rgb with alpha\nAn error occurred while interacting with the environment.\nAn Image in JPEG Format\nPixel is 1-bit luminance\nPixel is 16-bit luminance\nPixel is 16-bit luminance\nPixel is 2-bit luminance\nPixel is 4-bit luminance\nPixel is 8-bit luminance\nPixel is 8-bit luminance\nPixel is 1-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 16-bit luminance with an alpha channel\nPixel is 2-bit luminance with an alpha channel\nPixel is 4-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nPixel is 8-bit luminance with an alpha channel\nSet of supported strict limits for a decoder.\nResource limits for decoding.\nCompleting the operation would have required more …\nGrayscale colors.\nGrayscale colors + alpha channel\nContains the success value\nAn Image in OpenEXR Format\nAn error was encountered in input arguments.\nAn Image in PCX Format\nA generalized pixel.\nThe type of pixel.\nThe pixel with an associated <code>ColorType</code>. Not all possible …\nImmutable pixel iterator\nAn Image in PNG Format\nAn Image in general PNM Format\nThe type of each channel in a pixel. For example, this can …\nAn Image in QOI Format\nRGB colors.\nPixel contains 1-bit R, G and B channels\nPixel is 16-bit RGB\nPixel contains 16-bit R, G and B channels\nPixel contains 2-bit R, G and B channels\nPixel is 32-bit float RGB\nPixel is 32-bit float RGB\nAn image buffer for 32-bit float RGB pixels, where the …\nPixel contains 4-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nPixel contains 8-bit R, G and B channels\nSendable Rgb image buffer\nRGB colors + alpha channel\nPixel is 1-bit RGB with an alpha channel\nPixel is 16-bit RGBA\nPixel is 16-bit RGB with an alpha channel\nPixel is 2-bit RGB with an alpha channel\nPixel is 32-bit float RGBA\nPixel is 32-bit float RGBA\nAn image buffer for 32-bit float RGBA pixels, where the …\nPixel is 4-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nPixel is 8-bit RGB with an alpha channel\nSendable Rgb + alpha channel image buffer\nA View into another image\nThe scalar type that is used to store each channel in this …\nAn Image in TGA Format\nAn Image in TIFF Format\nPixel is of unknown color type with the specified bits per …\nAn operation can not be completed by the chosen …\nAn Image in WEBP Format\nAdjust the contrast of this image. <code>contrast</code> is the amount …\nReturn all <code>ImageFormat</code>s\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nRotates and/or flips the image as indicated by Orientation.\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nGet the bytes of this value.\nReturn this image’s pixels as a native endian byte slice.\nReturn a view on the raw sample buffer.\nReturn a view on the raw sample buffer for 32bit per …\nReturn a mutable view on the raw sample buffer.\nReturn a view on the raw sample buffer for 16 bit per …\nReturn a view on the raw sample buffer for 8 bit per …\nReturn a reference to an 16bit Grayscale image\nReturn a reference to an 8bit Grayscale image\nReturn a reference to an 16bit Grayscale image with an …\nReturn a reference to an 8bit Grayscale image with an …\nGet a mutable reference based version.\nReturn a mutable reference to an 16bit Grayscale image\nReturn a mutable reference to an 8bit Grayscale image\nReturn a mutable reference to an 16bit Grayscale image …\nReturn a mutable reference to an 8bit Grayscale image with …\nReturn a mutable reference to an 16bit RGB image\nReturn a mutable reference to an 32bit RGB image\nReturn a mutable reference to an 8bit RGB image\nReturn a mutable reference to an 16bit RGBA image\nReturn a mutable reference to an 32bit RGBA image\nReturn a mutable reference to an 8bit RGBA image\nView the samples as a slice.\nReturns the underlying raw buffer\nGet a reference based version.\nReturn a reference to an 16bit RGB image\nReturn a reference to an 32bit RGB image\nReturn a reference to an 8bit RGB image\nReturn a reference to an 16bit RGBA image\nReturn a reference to an 32bit RGBA image\nReturn a reference to an 8bit RGBA image\nView the samples as a slice.\nView this buffer as an image over some type of pixel.\nInterpret this buffer as a mutable image.\nView this buffer but keep mutability at a sample level.\nReturns the number of bits contained in a pixel of …\nReturns the number of bits per pixel for this color type.\nBlend the color of a given pixel into ourself, taking into …\nPut a pixel at location (x, y), taking into account alpha …\nPut a pixel at location (x, y), taking into account alpha …\nPerforms a Gaussian blur on this image. <code>sigma</code> is a measure …\nTuple of bounds in the order of coordinate inputs.\nBrighten the pixels of this image. <code>value</code> is the amount to …\nIterators and other auxiliary structure for the <code>ImageBuffer</code>…\nReturns the image buffer\nReturns a mutable image buffer\nReturns the number of bytes contained in a pixel of …\nReturn if the <code>ImageFormat</code> can be decoded by the lib.\nReturn if the <code>ImageFormat</code> can be encoded by the lib.\nChange the coordinates of this subimage.\nReturns the number of color channels that make up this …\nGet the number of channels for colors of this type.\nReturns the components as a slice.\nReturns the channels of this pixel as a 4 tuple. If the …\nReturns the components as a mutable slice\nThis function checks the <code>max_image_width</code> and …\nThis function checks that all currently set strict limits …\nRemove the current information on the image format.\nEncoding and decoding for various image file formats.\nSteps through the iterator from the current frame until …\nReturn this image’s color type.\nSupplementary color information.\nReturns the color type of the image data produced by this …\nExamples\nCopies all of the pixels from another image into this …\nCopies all of the pixels from another image into this …\nCopies all of the pixels from another image into this …\nCopies all of the pixels from one part of this image to …\nCopies all of the pixels from one part of this image to …\nCopies all of the pixels from one part of this image to …\nReturn a cut-out of this image delimited by the bounding …\nReturn a cut-out of this image delimited by the bounding …\nRead the image (replaces <code>load</code>).\nDelay of this frame\nReturns a tuple containing the width and height of the …\nThe width and height of this image.\nThe width and height of this image.\nEnumerates over the pixels of the image. The iterator …\nEnumerates over the pixels of the image. The iterator …\nEnumerates over the rows of the image. The iterator yields …\nEnumerates over the rows of the image. The iterator yields …\nContains detailed error representation.\nReturns the raw Exif chunk, if it is present. A …\nReturns the raw Exif chunk, if it is present. A …\nReturns the raw Exif chunk, if it is present. A …\nExpands a color palette by re-using the existing buffer. …\nReturn a list of applicable extensions for this format.\nGet the dimensions <code>(channels, width, height)</code>.\nPerforms a fast blur on this image. <code>sigma</code> is the standard …\nFilters this image with the specified 3x3 kernel.\nCheck if a buffer of length <code>len</code> is large enough.\nImage representations for ffi.\nFlip this image horizontally\nFlip this image vertically\nGet the currently determined format.\nThis function increases the <code>max_alloc</code> limit with amount. …\nThis function acts identically to <code>free</code>, but takes a <code>usize</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a pixel from the 4 channels a, b, c and d. If …\nDecodes an encoded image into a dynamic image.\nReturn the image format specified by a path’s file …\nConstructs a new <code>ImageBuffer</code> by repeated application of …\nReturn the image format specified by a MIME type.\nCreate a delay from a ratio of milliseconds.\nConstructs a new frame\nReturn the image format specified by the path’s file …\nConstructs a new <code>ImageBuffer</code> by copying a pixel\nConstructs a buffer from a generic container (for example …\nConvert from a duration, clamped between 0 and an …\nReturns a view into a slice.\nReturns mutable view into a mutable slice.\nCreates an image buffer out of an existing buffer. Returns …\nGet a mutable reference to a single sample.\nReturns the pixel located at (x, y). Indexed from top left.\nGets a reference to the pixel at location <code>(x, y)</code>\nGets a reference to the pixel at location <code>(x, y)</code> or …\nGets a reference to the mutable pixel at location <code>(x, y)</code>. …\nGets a reference to the mutable pixel at location <code>(x, y)</code>\nDo not use is function: It is unimplemented!\nGets a reference to the mutable pixel at location <code>(x, y)</code> …\nGet a reference to a single sample.\nReturn a grayscale version of this image. Returns <code>Luma</code> …\nGuess image format from memory block\nIf there are any samples aliasing each other.\nReturns if there is an alpha channel.\nReturns false if the color scheme is grayscale, true …\nThe height of this image.\nThe height of this image.\nThe height of this image.\nThe height of this image.\nReturns the height of the underlying image\nHue rotate the supplied image. <code>value</code> is the degrees to …\nReturns the ICC color profile embedded in the image, or …\nReturns the ICC color profile embedded in the image, or …\nReturns the ICC color profile embedded in the image, or …\nRead a tuple containing the (width, height) of the image …\nMutable portion of the buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nImage Processing Functions\nReturns true if this x, y coordinate is contained inside …\nReturns true if this x, y coordinate is contained inside …\nReturns true if this x, y coordinate is contained inside …\nCheck that the pixel and the channel index are in bounds.\nGet an index provided it is inbouds.\nResolve the index of a particular sample.\nReturn a reference to a single sample at specified …\nGet the theoretical position of sample (x, y, channel).\nReturn a mutable reference to a single sample at specified …\nGet a reference to the underlying image.\nGet a mutable reference to the underlying image.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the image buffer\nReturn this image’s pixels as a byte vector. If the …\nConvert the reader into a decoder.\nRead the image dimensions.\nReturn the raw sample buffer with its stride an dimension …\nConsume the decoder producing a series of frames.\nUnwrap the reader.\nConsume the image and returns a Luma image.\nConsume the image and returns a Luma image.\nConsume the image and returns a <code>LumaA</code> image.\nConsume the image and returns a <code>LumaA</code> image.\nReturns the underlying raw buffer\nConsume the image and returns a RGB image.\nConsume the image and returns a RGB image.\nConsume the image and returns a RGB image.\nConsume the image and returns a RGBA image.\nConsume the image and returns a RGBA image.\nConsume the image and returns a RGBA image.\nConsumes the image buffer and returns the underlying data …\nInvert this pixel\nInvert the colors of this image. This method operates …\ndeprecated io module the original io module has been …\nCheck if a buffer fulfills the requirements of a normal …\nA <code>repr(C)</code> description of the layout of buffer samples.\nReturns the x offset\nSet a custom set of decoding limits.\nCreate a new image from a Reader.\nCreate a new image from a byte slice\nCreate a new image from a byte slice\nApply the function <code>f</code> to each channel of this pixel.\nApply the function <code>f</code> to each channel of this pixel and …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nApply the function <code>f</code> to each channel except the alpha …\nMathematical helper functions and types.\nThe maximum allowed sum of allocations allocated by the …\nThe maximum allowed image height. This limit is strict. …\nThe maximum allowed image width. This limit is strict. The …\nTypes describing image metadata\nGet the minimum length of a buffer such that all in-bounds …\nCreates a new <code>Frames</code> from an implementation specific …\nConstructs a new frame without any delay.\nCreate a new image reader without a preset format.\nCreates a new image buffer based on a <code>Vec&lt;P::Subpixel&gt;</code>.\nCreates a dynamic image backed by a buffer depending on …\nConstruct a new subimage The coordinates set the position …\nCreates a dynamic image backed by a buffer of gray pixels.\nCreates a dynamic image backed by a buffer of gray pixels.\nCreates a dynamic image backed by a buffer of gray pixels …\nCreates a dynamic image backed by a buffer of gray pixels …\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGB pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nCreates a dynamic image backed by a buffer of RGBA pixels.\nDisable all decoding limits.\nDisable all limits.\nThe numerator and denominator of the delay in milliseconds.\nThe offsets of this subimage relative to the underlying …\nOpen the image located at the path specified. The image’…\nOpen a file to read, format will be guessed from path.\nReturns the orientation of the image.\nReturns the orientation of the image.\nReturns the orientation of the image.\nReturns the color type of the image file before decoding\nReturns the color type of the image file before decoding\nReturns the color type of the image file before decoding\nReturns an Iterator over the pixels of this image. The …\nReturns an Iterator over the pixels of this image. The …\nReturns an Iterator over the pixels of this image. The …\nReturns an iterator over the pixels of this image. The …\nReturns an iterator over the mutable pixels of this image.\nPut a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location <code>(x, y)</code>\nReturns all the bytes in the image.\nUse <code>read_image</code> instead; this method is an implementation …\nDecode a rectangular section of the image.\nReturn the <code>ImageFormat</code>s which are enabled for reading.\nThis function checks that the current limit allows for …\nThis function acts identically to <code>reserve</code>, but accepts the …\nThis function acts identically to <code>reserve</code>, but takes a …\nResize this image using the specified filter algorithm. …\nResize this image using the specified filter algorithm. …\nResize this image using the specified filter algorithm. …\nRotate this image 180 degrees.\nRotate this image 270 degrees clockwise.\nRotate this image 90 degrees clockwise.\nReturns an iterator over the rows of this image.\nReturns an iterator over the mutable rows of this image.\nGet the format of the buffer when viewed as a matrix of …\nUnderlying linear container holding sample values.\nSaves the buffer to a file at the path specified.\nSaves the buffer to a file at the path specified.\nSaves the supplied buffer to a file at the path specified.\nSaves the supplied buffer to a file at the path specified …\nSaves the buffer to a file at the specified path in the …\nSaves the buffer to a file at the specified path in the …\nSupply the format as which to interpret the read image.\nSet the ICC profile to use for the image.\nSet the ICC profile to use for the image.\nSet the ICC profile to use for the image.\nSet the decoder to have the specified limits. See <code>Limits</code> …\nSet the decoder to have the specified limits. See <code>Limits</code> …\nSet the decoder to have the specified limits. See <code>Limits</code> …\nShrink the image to the minimum of current and given …\nGet the strides for indexing matrix-like <code>[(c, w, h)]</code>.\nReturns a mutable subimage that is a view into this image. …\nReturns a mutable subimage that is a view into this image. …\nReturns a mutable subimage that is a view into this image. …\nCreate a mutable sub-view of the image.\nScale this image down to fit within a specific size. …\nScale this image down to a specific size. Returns a new …\nConvert this subimage to an <code>ImageBuffer</code>\nConvert this pixel to luma\nReturns a copy of this image as a Luma image.\nReturns a copy of this image as a Luma image.\nReturns a copy of this image as a Luma image.\nConvert this pixel to luma with an alpha channel\nReturns a copy of this image as a <code>LumaA</code> image.\nReturns a copy of this image as a <code>LumaA</code> image.\nReturns a copy of this image as a <code>LumaA</code> image.\nReturn the MIME type for this image format or “…\nConvert this pixel to RGB\nReturns a copy of this image as an RGB image.\nReturns a copy of this image as an RGB image.\nReturns a copy of this image as an RGB image.\nConvert this pixel to RGB with an alpha channel\nReturns a copy of this image as an RGBA image.\nReturns a copy of this image as an RGBA image.\nReturns a copy of this image as an RGBA image.\nCopy the data into an owned vector.\nReturns the y offset\nReturns the total number of bytes in the decoded image.\nReturns the total number of bytes in the decoded image.\nReturns the total number of bytes in the decoded image.\nMove the data into an image buffer.\nReturns the pixel located at (x, y). Indexed from top left.\nReturns the pixel located at (x, y). Indexed from top left.\nReturns the pixel located at (x, y). Indexed from top left.\nReturns the pixel located at (x, y), ignoring bounds …\nPuts a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location (x, y). Indexed from top left.\nPuts a pixel at location (x, y), ignoring bounds checking.\nPerforms an unsharpen mask on this image. <code>sigma</code> is the …\nReturns a subimage that is an immutable view into this …\nReturns a subimage that is an immutable view into this …\nReturns a subimage that is an immutable view into this …\nCreate a sub-view of the image.\nThe width of this image.\nThe width of this image.\nThe width of this image.\nThe width of this image.\nReturns the width of the underlying image\nConstruct a reader with specified format.\nMake a format guess based on the content, replacing it on …\nCreate a monocolor image from a single pixel.\nWrites the supplied buffer to a writer in the specified …\nWrites all the bytes in an image to the encoder.\nWrites the buffer to a writer in the specified format.\nEncode this image and write it to <code>w</code>.\nWrites the buffer with the given encoder.\nEncode this image with the provided encoder.\nReturn the <code>ImageFormat</code>s which are enabled for writing.\nProvides color conversions for whole image buffers.\nEnumerate the pixels of an image.\nEnumerate the pixels of an image.\nEnumerate the rows of an image.\nEnumerate the rows of an image.\nIterate over pixel refs.\nIterate over mutable pixel refs.\nIterate over rows of an image\nIterate over mutable rows of an image\nConverts <code>self</code> to a buffer of type T\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecoding and Encoding of JPEG Images\nDecoding and Encoding of PNG Images\nPixels per centimeter\nPixels per inch (2.54 cm)\nJPEG decoder\nThe representation of a JPEG encoder\nRepresents the absence of a unit, the values indicate only …\nRepresents the pixel density of an image\nRepresents a unit in which the density of an image is …\nReturns a pixel density with a pixel aspect ratio of 1\nA couple of values for (Xdensity, Ydensity)\nCreates the most common pixel density type: the horizontal …\nEncodes the image stored in the raw byte buffer <code>image</code> that …\nEncodes the given image.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>\nCreate a new encoder that writes its output to <code>w</code>, and has …\nSet the pixel density of the images the encoder will …\nThe unit in which the density is measured\nUses a heuristic to select one of the preceding filters …\nAn <code>AnimationDecoder</code> adapter of <code>PngDecoder</code>.\nFilters based on the average of left and right neighbor …\nHigh compression level\nCompression level of a PNG encoder. The default setting is …\nDefault compression level\nFast, minimal compression\nFilter algorithms used to process image data to improve …\nNo processing done, best used for low bit depth grayscale …\nAlgorithm that takes into account the left, upper left, …\nPNG decoder\nPNG encoder\nFilters based on previous pixel in the same scanline\nFilters based on the scanline above\nTurn this into an iterator over the animation frames.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the gamma value of the image or None if no gamma …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns if the image contains an animation.\nCreates a new decoder that decodes from the stream <code>r</code>\nCreate a new encoder that writes its output to <code>w</code>\nCreate a new encoder that writes its output to <code>w</code> with …\nCreates a new decoder that decodes from the stream <code>r</code> with …\nWrite a PNG image with the specified width, height, and …\nThe required color type can not be handled.\nAn error was encountered while decoding.\nAn error was encountered while decoding an image.\nThe resulting image exceed dimension limits in either …\nThe dimensions passed are wrong.\nAn error was encountered while encoding.\nAn error was encountered while encoding an image.\nContains the error value\nThe format is known exactly.\nRepeated an operation for which error that could not be …\nAn image format is not supported.\nA string describing the parameter. This is discouraged and …\nSome feature specified by string. This is discouraged and …\nThe generic error type for image operations.\nA best effort representation for image formats.\nResult of an image decoding/encoding process\nThe operation would have performed an allocation larger …\nAn error occurred while interacting with the environment.\nCompleting the operation would have required more …\nIndicates the limit that prevented an operation from …\nCompleting the operation would have required more …\nThe format can be identified by a name.\nThe end of the image has been reached.\nContains the success value\nAn error was encountered in input arguments.\nAn error was encountered in inputs arguments.\nDetails how a parameter is malformed.\nA common path extension for the format is known.\nThe format is not known or could not be determined.\nAn operation can not be completed by the chosen …\nThe specified strict limits are not supported for this …\nThe implementation for an operation was not provided.\nDetails what feature is not supported.\nReturns the image format associated with this error.\nReturn the image format associated with this error.\nReturns the image format associated with this error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an <code>UnsupportedError</code> for an image with details on …\nCreate an <code>EncodingError</code> for an image format.\nCreate a <code>DecodingError</code> for an image format.\nConstruct a <code>ParameterError</code> directly from a corresponding …\nConstruct a generic <code>LimitError</code> directly from a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the corresponding <code>UnsupportedErrorKind</code> of the …\nReturns the corresponding <code>ParameterErrorKind</code> of the error.\nReturns the corresponding <code>LimitErrorKind</code> of the error.\nCreate an <code>EncodingError</code> that stems from an arbitrary error …\nCreate a <code>DecodingError</code> that stems from an arbitrary error …\nThe given limits\nThe supported strict limits\nThe color format did not match the channel count.\nThe samples are in column-major form and all samples are …\nDenotes invalid flat sample buffers when trying to convert …\nA flat buffer over a (multi channel) image.\nAll samples are packed.\nDifferent normal forms of buffers.\nThe represented image can not use this representation.\nAt least pixels are packed.\nThe samples are in row-major form and all samples are …\nA ffi compatible description of a sample buffer.\nThe represented image was too large.\nNo pixel aliases another.\nA flat buffer that can be used as an image view.\nA mutable owning version of a flat buffer.\nDeprecated - <code>ChannelCountMismatch</code> is used instead\nTuple of bounds in the order of coordinate inputs.\nAdd this to an index to get to the sample in the next …\nThe number of channels in the color representation of the …\nSupplementary color information.\nDescribe a column-major image packed in all directions.\nGet the dimensions <code>(channels, width, height)</code>.\nCheck if a buffer of length <code>len</code> is large enough.\nGet a reference on the inner sample descriptor.\nGet a reference on the sample buffer descriptor.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to a selected subpixel if it is …\nGet a mutable reference to a selected sample.\nGet a reference to a selected subpixel if it is in-bounds.\nGet a reference to a selected subpixel.\nIf there are any samples aliasing each other.\nThe height of the represented image.\nAdd this to an index to get to the next sample in …\nReturn the mutable portion of the buffer that holds sample …\nReturn the mutable buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nReturn the portion of the buffer that holds sample values.\nCheck that the pixel and the channel index are in bounds.\nGet an index provided it is inbouds.\nResolve the index of a particular sample.\nGet the theoretical position of sample (channel, x, y).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake out the sample buffer.\nTake out the sample buffer.\nCheck if a buffer fulfills the requirements of a normal …\nA <code>repr(C)</code> description of the layout of buffer samples.\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nGet the minimum length of a buffer such that all in-bounds …\nCompares the logical preconditions.\nDescribe a row-major image packed in all directions.\nGet a reference on the inner buffer.\nGet a reference on the inner buffer.\nUnderlying linear container holding sample values.\nShrink the image to the minimum of current and given …\nShrink the inner image.\nShrink the inner image.\nGet the strides for indexing matrix-like <code>[(c, w, h)]</code>.\nTry to convert this into an image with mutable pixels.\nThe width of the represented image.\nAdd this to an index to get to the next sample in …\nA bi-level color map\nCubic Filter\nThe color type on which the map operates on\nA color map\nAvailable Sampling Filters.\nGaussian Filter\nLanczos with window 3\nNearest Neighbor\nLinear Filter\nPerforms a Gaussian blur on the supplied image. <code>sigma</code> is a …\nBrighten the supplied image. <code>value</code> is the amount to …\nFunctions for altering and converting the color of …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nReturn a mutable view into an image The coordinates set …\nReturn an immutable view into an image The coordinates set …\nReduces the colors of the image using the supplied …\nApproximation of Gaussian blur after Kovesi, P.:  Fast …\nPerform a 3x3 box filter on the supplied image. <code>kernel</code> is …\nFlip an image horizontally\nFlip an image horizontally and put the result into the …\nFlip an image horizontally in place.\nFlip an image vertically\nFlip an image vertically and put the result into the …\nFlip an image vertically in place.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to a grayscale image with the …\nConvert the supplied image to a grayscale image with the …\nDetermine if this implementation of <code>ColorMap</code> overrides the …\nDetermine if this implementation of <code>ColorMap</code> overrides the …\nDetermine if this implementation of <code>ColorMap</code> overrides the …\nDetermine if this implementation of <code>ColorMap</code> overrides the …\nDetermine if this implementation of <code>ColorMap</code> overrides the …\nIndicate <code>NeuQuant</code> implements <code>lookup</code>.\nFill the image with a linear horizontal gradient\nHue rotate the supplied image. <code>value</code> is the degrees to …\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nLinearly sample from an image using coordinates in [0, w-1]…\nSample from an image using coordinates in [0, w-1] and [0, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvert each pixel within the supplied image. This function …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nLooks up color by index in the color map.  If <code>idx</code> is out …\nMaps <code>color</code> to the closest color in the color map.\nOverlay an image at a given coordinate (x, y)\nCalculate the region that can be copied from top to bottom.\nReplace the contents of an image at a given coordinate (x, …\nResize the supplied image to the specified dimensions. …\nRotate an image 180 degrees clockwise.\nRotate an image 180 degrees clockwise and put the result …\nRotate an image 180 degrees clockwise in place.\nRotate an image 270 degrees clockwise.\nRotate an image 270 degrees clockwise and put the result …\nRotate an image 90 degrees clockwise.\nRotate an image 90 degrees clockwise and put the result …\nLinearly sample from an image using coordinates in [0, 1].\nSample from an image using coordinates in [0, 1], taking …\nResize the supplied image to the specific dimensions.\nTile an image by repeating it multiple times\nPerforms an unsharpen mask on the supplied image. <code>sigma</code> is …\nFill the image with a linear vertical gradient\nA bi-level color map\nThe color type on which the map operates on\nA color map\nBrighten the supplied image. <code>value</code> is the amount to …\nBrighten the supplied image in place. <code>value</code> is the amount …\nAdjust the contrast of the supplied image. <code>contrast</code> is the …\nAdjust the contrast of the supplied image in place. …\nReduces the colors of the image using the supplied …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to grayscale. Alpha channel is …\nConvert the supplied image to a grayscale image with the …\nConvert the supplied image to a grayscale image with the …\nHue rotate the supplied image. <code>value</code> is the degrees to …\nHue rotate the supplied image in place.\nReduces the colors using the supplied <code>color_map</code> and …\nReturns the index of the closest match of <code>color</code> in the …\nInvert each pixel within the supplied image. This function …\nMaps <code>color</code> to the closest color in the color map.\nDeprecated re-export of <code>LimitSupport</code>\nDeprecated re-export of <code>Limits</code>\nDeprecated re-export of <code>ImageReader</code> as <code>Reader</code>\nThe maximum allowed sum of allocations allocated by the …\nThe maximum allowed image height. This limit is strict. …\nThe maximum allowed image width. This limit is strict. The …\nA Rectangle defined by its top left corner, width and …\nReturns the argument unchanged.\nThe rectangle’s height.\nCalls <code>U::from(self)</code>.\nThe rectangle’s width.\nThe x coordinate of the top left corner.\nThe y coordinate of the top left corner.\nFlip horizontally. Can be performed in-place.\nFlip vertically. Can be performed in-place.\nDo not perform any transformations.\nDescribes the transformations to be applied to the image. …\nRotate by 180 degrees. Can be performed in-place.\nRotate by 270 degrees clockwise. Equivalent to rotating by …\nRotate by 270 degrees clockwise and flip horizontally.\nRotate by 90 degrees clockwise.\nRotate by 90 degrees clockwise and flip horizontally.\nReturns the argument unchanged.\nConverts from Exif orientation\nCalls <code>U::from(self)</code>.\nConverts into Exif orientation\nA layer of graphical primitives.\nA stack of layers used for drawing.\nReturns the slice of layers in the <code>Stack</code>.\nClears the layers of the <code>Stack</code>, allowing reuse.\nReturns a mutable reference to the current <code>Layer</code> of the …\nFlushes and settles any pending group of primitives in the …\nFlushes and settles any primitives in the current layer of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns an iterator over immutable references to the …\nReturns an iterator over mutable references to the layers …\nCreates a new empty <code>Stack</code>.\nPops the current clipping region from the <code>Stack</code> and …\nPops the current <code>Transformation</code> in the <code>Stack</code>.\nPushes a new clipping region in the <code>Stack</code>; creating a new …\nPushes a new <code>Transformation</code> in the <code>Stack</code>.\nClears all the layers contents and resets its bounds.\nResizes the <code>Layer</code> to the given bounds.\nReturns the current <code>Transformation</code> of the <code>Stack</code>.\nCreates a new <code>Layer</code> with the given bounds.\nThe result of counting the attributes of a set of meshes.\nA mesh with a gradient.\nA vertex which contains 2D position &amp; packed gradient data.\nA set of vertices and indices representing a list of …\nA low-level primitive to render a mesh of triangles.\nA renderer capable of drawing a <code>Mesh</code>.\nA mesh with a solid color.\nA two-dimensional vertex with a color.\nReturns the number of total vertices &amp; total indices of …\nThe color of the vertex in <strong>linear</strong> RGBA.\nDraws the given <code>Mesh</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe packed vertex data of the gradient.\nThe total amount of gradient vertices.\nThe total amount of gradient meshes.\nThe list of vertex indices that defines the triangles of …\nThe total amount of indices.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe vertex position in 2D space.\nThe vertex position in 2D space.\nThe total amount of solid vertices.\nThe total amount of solid meshes.\nThe vertices of the mesh\nThe vertices and indices of the mesh.\nThe vertices and indices of the mesh.\nThe clip bounds of the <code>Mesh</code>.\nThe clip bounds of the <code>Mesh</code>.\nThe <code>Transformation</code> for the vertices of the <code>Mesh</code>.\nThe <code>Transformation</code> for the vertices of the <code>Mesh</code>.\nA store of recently used sections of text.\nSome cached text.\nA multi-line text editor.\nAn editor.\nA set of system fonts.\nA bunch of text.\nA paragraph.\nA weak reference to a [<code>cosmic-text::Buffer</code>] that can be …\nSome raw text.\nA text primitive.\nA version number.\nAllocates a text <code>Entry</code> if it is not already present in the …\nReturns the buffer of the <code>Editor</code>.\nReturns the buffer of the <code>Paragraph</code>.\nA weak reference to a <code>cosmic_text::Buffer</code>.\nCache text.\nThe clip bounds of the text.\nThe color of the text.\nCreates a <code>Weak</code> reference to the <code>Editor</code>.\nCreates a <code>Weak</code> reference to the <code>Paragraph</code>.\nDraw and edit text.\nReturns the global <code>FontSystem</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the text <code>Entry</code> with the given <code>KeyHash</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a font from its bytes.\nMeasures the dimensions of the given <code>cosmic_text::Buffer</code>.\nCreates a new empty <code>Cache</code>.\nCreates a new empty <code>Editor</code>.\nCreates a new empty <code>Paragraph</code>.\nDraw paragraphs.\nThe position of the text.\nReturns the raw <code>cosmic_text::FontSystem</code>.\nReturns the attributes of the given <code>Font</code>.\nConverts some <code>Color</code> to a <code>cosmic_text::Color</code>.\nConverts some <code>Shaping</code> strategy to a <code>cosmic_text::Shaping</code> …\nConverts some <code>Wrapping</code> strategy to a <code>cosmic_text::Wrap</code> …\nTrims the <code>Cache</code>.\nReturns the current <code>Version</code> of the <code>FontSystem</code>.\nThe bounds of the text.\nThe clip bounds of the text.\nThe color of the text.\nThe contents of the text.\nThe font of the text.\nThe horizontal alignment of the text.\nThe line height of the text.\nThe shaping strategy of the text.\nThe size of the text in logical pixels.\nThe vertical alignment of the text.\nA store of recently used sections of text.\nA cache entry.\nA cache key representing a section of text.\nThe hash of a <code>Key</code>.\nThe bounds of the text.\nThe buffer of text, ready for drawing.\nThe content of the text.\nThe <code>Font</code> of the text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line height of the text.\nThe minimum bounds of the text.\nThe shaping strategy of the text.\nThe size of the text.\nAll small caps (uppercase and lowercase to small capitals)\nAn action to perform on an <code>Editor</code>\nAdvanced text shaping and font fallback.\nWhether to associate cursors placed at a boundary between …\nAlign or justify\nRepresents an angle in degrees or radians.\nText attributes\nList of text attributes to apply to a line\nAn owned version of <code>Attrs</code>\nBlack weight (900), the thickest value.\nBold weight (700).\nDelete text behind cursor\nBasic shaping with no font fallback.\nAn iterator over the paragraphs in the input text. It is …\nA value borrowed together with an <code>FontSystem</code>\nA buffer of text that is shaped and laid out\nMove cursor to the end of the document\nA line (or paragraph) of text that is shaped and laid out\nMove cursor to the start of the document\nContextual alternates (glyph substitutions based on …\nContextual ligatures (context-dependent ligatures)\nKey for building a glyph cache\nFlags that change rendering\nMetrics, but implementing Eq and Hash using u32 …\nHelper for caching a value when the value is optionally …\nA set of change items grouped into one logical change\nA unique change to an editor\nMouse click at specified position\nCloses a subpath, connecting the final point to the …\nText color\n32-bit RGBA bitmap.\nPath command.\nUse <code>\\r</code> for line ending (many legacy systems)\nUse <code>\\r\\n</code> for line ending (Windows-style)\nGlyphs in cursive fonts generally use a more informal …\nCurrent cursor location\nA cubic bezier curve from the previous point to the final …\nDisable hinting\nDiscretionary ligatures (optional stylistic ligatures)\nDelete text in front of cursor\nMouse double click at specified position\nMove cursor down\nMouse drag to specified position\nExtra-bold weight (800).\nExtra light weight (200).\nA trait to allow easy replacements of <code>Editor</code>, like …\nA wrapper of [<code>Buffer</code>] for easy editing\nMove cursor to end of line\nCreate new line\nEscape, clears selection\nSkew by 14 degrees to synthesize italic\nThe <code>Fallback</code> trait allows for configurable font fallback …\nA font family.\nAn owned version of <code>Family</code>\nFantasy fonts are primarily decorative or expressive fonts …\nA 4-byte <code>OpenType</code> feature tag identifier\nA font\nFont-specific part of <code>Attrs</code> to be used for matching\nAccess to the system fonts.\nWraps at a glyph level\nMove cursor to specific line\nMove cursor to start of line\nIdentity matrix.\nInsert character at cursor\nA form that is generally cursive in nature.\nKerning adjusts spacing between specific character pairs\nLight weight (300).\nThe position of a cursor within a [<code>Buffer</code>].\nApply specific <code>LayoutCursor</code>\nA laid out glyph\nA line of laid out glyphs\nA line of visible text for rendering\nAn iterator of visible text lines, see <code>LayoutRun</code>\nMove cursor left\nMove cursor to next word boundary to the left\nA wrapper for letter spacing to get around that f32 doesn…\nUse <code>\\n</code> for line ending (POSIX-style)\nUse <code>\\n\\r</code> for line ending (some legacy systems)\nSelect by lines\nLine ending\nIterator over lines terminated by <code>LineEnding</code>\nA straight line from the previous point to the specified …\nMedium weight (500, higher than normal).\n8-bit alpha mask.\nMetrics of text\nThe sole criterion of a monospace font is that all glyphs …\nA motion to perform on a <code>Cursor</code>\nMove the cursor with some motion\nBegins a new subpath at the specified point.\nNormal (400).\nThe name of a font family of choice.\nMove cursor to next character (<code>Self::Right</code> in LTR, …\nMove cursor to next word boundary\nNo selection\nNo wrapping\nNo line ending\nA face that is neither italic not obliqued.\nNormal selection\nA typically-sloped version of the regular face.\nRender as a pixel font\nMove cursor down one page\nMove cursor up one page\nMove cursor to end of paragraph\nMove cursor to start of paragraph\nDescribes the offset and dimensions of a rendered mask.\nA platform-specific font fallback list, for Unix.\nMove cursor to previous character (<code>Self::Left</code> in LTR, …\nMove cursor to previous word boundary\nA quadratic curve from the previous point to the final …\nMove cursor right\nMove cursor to next word boundary to the right\nSemibold weight (600).\nSmall caps (lowercase to small capitals)\nStandard ligatures (fi, fl, etc.)\nStylistic Set 1 (font-specific alternate glyphs)\nStylistic Set 2 (font-specific alternate glyphs)\nGlyphs in sans-serif fonts, as the term is used in CSS, …\nScroll position in [<code>Buffer</code>]\nScroll specified number of lines\nSelection mode\nSerif fonts represent the formal text style for a script.\nA set of buffers containing allocations for shaped text.\nA shaped glyph\nA shaped line (or paragraph)\nA helper structure for caching shape runs.\nKey for caching shape runs.\nA shaped span (for bidirectional processing)\nA shaped word (for word wrapping)\nThe shaping strategy of some text.\nMove cursor to start of line, skipping whitespace\nA face width.\nAllows italic or oblique faces to be selected.\nBinning of subpixel position for cache optimization\n32-bit RGBA subpixel mask.\nCache for rasterizing with the swash scaler\nContent of a scaled glyph image.\nScaled glyph image.\nThin weight (100), the thinnest value.\nTwo dimensional transformation matrix.\nMouse triple click at specified position\nMove cursor up\nMove cursor up or down by a number of pixels\nSpecifies the weight of glyphs in the font, their degree …\nSelect by words\nWraps at the word level\nWraps at the word level, or fallback to glyph level if a …\nWrapping mode\nAngle of zero degrees.\nGet the alpha component\nPerform an Action on the editor\nPerform an Action on the editor\nAdd an attribute span, removes any previous matching parts …\nWhether to associate the cursor with the run before it or …\nGet the Text alignment\nGet a flags value with all known bits set.\nAppend line at end of this line\nApply a change\nGet an array over all of the components, in <code>[r, g, b, a]</code> …\nGet a tuple over all of the attributes, in <code>(r, g, b, a)</code> …\nGet the line ending as a str\nGet attributes list\nGet the current automatic indentation setting\nGet the blue component\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nMutably borrows <code>self</code> together with an <code>FontSystem</code> for more …\nMutably borrows <code>self</code> together with an <code>FontSystem</code> for more …\nMutably borrows <code>self</code> together with an <code>FontSystem</code> for more …\nMutably borrows the buffer together with an <code>FontSystem</code> for …\nGet the internal <code>BufferRef</code>\nGet the internal <code>BufferRef</code>\nSee <code>Self::new</code>.\nSee <code>Self::new</code>.\nSee <code>Self::new</code>.\nCache key, see <code>CacheKey</code>\nSet <code>CacheKeyFlags</code>\n<code>CacheKeyFlags</code>\nResets the image to a default state.\nClear the current attribute spans\nSet Color\nOptional color override\nFallbacks to use after any script specific fallbacks\nCheck if this set of attributes can be shaped with another\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGiven an origin, offset and bounding box, computes the …\nWhether all set bits in a source flags value are also set …\nContent of the image.\nCopy selection\nGet the current cursor\nApply a <code>Motion</code> to a <code>Cursor</code>\nApply a <code>Motion</code> to a <code>Cursor</code>\nGet X and Y position of the top left corner of the cursor\nRaw image data.\nGet the database.\nGet a mutable reference to the database.\nGet the default Attrs\nDelete text starting at start Cursor and ending at end …\nDelete selection, adjusting cursor and returning true if …\nReturns the determinant of the transform.\nThe intersection of a source flags value with the …\nDisable a feature (set to 0)\nDraw the buffer\nDraw the editor\nDraw the buffer\nGet a flags value with all bits unset.\nEnable a feature (set to 1)\nCursor indicating end of change\nEnd index of cluster in original line\nGet line ending\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nSet Family\nGet completed change\n<code>CacheKeyFlags</code>\nSet <code>FontFeatures</code>\nFont ID\nFont id of the glyph\nFont size in pixels\nFont size of the glyph\n<code>f32</code> bits of font size\nFont weight\nFont weight of the glyph\nFallbacks to never use\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates a new angle from degrees.\nCreates a new angle from gradians.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates a new angle from radians.\nCreates a new angle from turns.\nGet the green component\nGets the value if in state <code>Self::Used</code>.\nGet cache item, updating age if found\nGet a font by its ID and weight.\nCreate a swash Image from a cache key, caching results\nCreate a swash Image from a cache key, without caching …\nGets the value mutably if in state <code>Self::Used</code>.\nCreates outline commands\nCreates outline commands, without caching results\nGet the attribute span for an index\nIndex of [<code>LayoutGlyph</code>] in [<code>LayoutLine::glyphs</code>]\nGlyph ID\nFont id of the glyph\nThe array of layout glyphs to draw\nGlyphs in line\nHeight in pixels.\nReturn the pixel span <code>Some((x_left, x_width))</code> of the …\nConvert x, y position to Cursor (hit detection)\nThe horizontal position of scroll in fractional pixels\nFirst-byte-index of glyph at cursor (will insert behind …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInsert cache item with current age\nInsert if true, delete if false\nInsert text at specified cursor with specified <code>attrs_list</code>\nInsert a string at the current cursor or replacing the …\nInsert a string at the current cursor or replacing the …\nInsert a string at the current cursor or replacing the …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this <code>FontSystem</code> and return the locale and database.\nConsume this line, returning only its text contents as a …\nReturns the inverse of the transform, if any.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nChecks if the value is empty or unused.\nChecks if the value is used (i.e. cached for access).\nChange items grouped into one change\nYield a set of contained flags values.\nYield a set of contained named flags values.\nLayout line, will cache results\nIndex of [<code>LayoutLine</code>] in [<code>BufferLine::layout</code>]\nConvert a <code>Cursor</code> to a <code>LayoutCursor</code>\nGet line layout cache\nGet the visible layout runs for rendering and other tasks\nHorizontal offset with respect to the origin specified …\nSet letter spacing (tracking) in EM\nLetter spacing (tracking) in EM\nLetter spacing (tracking) in EM\nUnicode <code>BiDi</code> embedding level, character is left-to-right …\nIndex of [<code>BufferLine</code>] in [<code>Buffer::lines</code>]\nIndex of [<code>BufferLine</code>] in [<code>Buffer::lines</code>]\nIndex of [<code>BufferLine</code>] in [<code>Buffer::lines</code>]. This will be …\nY offset to next line\nLine height in pixels\nLine height of the glyph, will override buffer setting\nMaximum line height of any spans in line\nThe index of the original text line\nLay out the provided line index and return the result\nLay out the provided line index and return the result\nShape the provided line index and return the result\nShape the provided line index and return the result\nY offset to top of line\nWidth of line\nY offset to baseline of line\n<code>BufferLine</code>s (or paragraphs) of text in the buffer\nGet the locale.\nCheck if font matches\nMaximum ascent of the glyphs in line\nMaximum descent of the glyphs in line\nSet metadata\nGet line metadata. This will be None if …\nMetadata from <code>Attrs</code>\nSet <code>Metrics</code>, overriding values in buffer\nGet the current <code>Metrics</code>\nGet the current <code>monospace_width</code>\nCreate a new <code>FontSystem</code>, that allows access to any …\nCreate a new swash cache\nCreates a new transform.\nCreate a new set of attributes with sane defaults\nCreate a new attributes list with a set of default Attrs\nCreate an iterator to split the input text into paragraphs …\nCreate metrics with given font size and line height\nCreate a new <code>Buffer</code> with the provided <code>FontSystem</code> and …\nCreate a new line with the given text and attributes list …\nCreate a new cursor\nCreate a new <code>LayoutCursor</code>\nCreate a new scroll\nCreate a new <code>Editor</code> with the provided [<code>Buffer</code>]\nCreate an iterator of lines in a string slice\nShape a word into a set of glyphs.\nShape a span into a set of words.\nShape a line into a set of spans, using a scratch buffer. …\nCreates a new empty scaled image.\nCreate an empty <code>Buffer</code> with the provided <code>Metrics</code>. This is …\nCreate a new cursor, specifying the affinity\nCreate a new <code>FontSystem</code> with a pre-specified set of fonts.\nCreate a new <code>FontSystem</code> with a pre-specified locale and …\nCreate a new <code>FontSystem</code> with a pre-specified locale, font …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nOffset and size of the image.\nReturns a new transform that represents a rotation …\nReturns a new transform that represents a scale followed …\nReturns a new transform that represents a translation …\nGet the red component\nGet the <code>Buffer</code> redraw flag\nGet the <code>Buffer</code> redraw flag\nGet the <code>Buffer</code> redraw flag\nTrue if a redraw is needed\nCreate metrics with given font size and calculate line …\nThe intersection of a source flags value with the …\nReset shaping, layout, and metadata caches\nReset only layout cache\nResets the current line with new internal values.\nReset shaping and layout caches\nCreate new color with red, green, and blue components\nCreate new color with red, green, blue, and alpha …\nCreates a rotation transform.\nCreates a rotation transform around a point.\nTrue if the original paragraph direction is RTL\nCreates a scale transform.\nScale font size and line height\nFallbacks to use per script\nGet the current scroll location\nGet the current selection position\nGet the bounds of the current selection\nGet the bounds of the current selection\nGet the bounds of the current selection\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the text alignment\nSet attributes list\nEnable or disable automatic indentation\nSet the current cursor\nSet line ending\nSet line metadata. This is stored until the next line reset\nSet the current <code>Metrics</code>\nSet the current <code>Metrics</code>\nSet the current <code>Metrics</code> and buffer dimensions at the same …\nSet the current <code>Metrics</code> and buffer dimensions at the same …\nSet monospace width monospace glyphs should be resized to …\nSet the <code>Buffer</code> redraw flag\nSet the <code>Buffer</code> redraw flag\nSet the <code>Buffer</code> redraw flag\nSet redraw needed flag\nSet text of buffer, using an iterator of styled spans …\nSet text of buffer, using an iterator of styled spans …\nSet the current scroll location\nSet the current selection position\nSet the current buffer dimensions\nSet the current buffer dimensions\nSet the current tab width. A <code>tab_width</code> of 0 is not …\nSet tab width (number of spaces between tab stops)\nSet the current tab width. A <code>tab_width</code> of 0 is not …\nSet tab width (number of spaces between tab stops)\nSet text of buffer, using provided attributes for each …\nSet text and attributes list\nSet text of buffer, using provided attributes for each …\nMoves the value from <code>Self::Used</code> to <code>Self::Unused</code>.\nSets the value to <code>Self::Used</code>.\nSet the current <code>Wrap</code>\nSet the current <code>Wrap</code>\nShape line, will cache results\nShape lines until scroll, after adjusting scroll if the …\nShape lines until scroll, after adjusting scroll if the …\nGet line shaping cache\nShape lines until cursor, also scrolling to include cursor …\nShape lines until cursor, also scrolling to include cursor …\nShape lines until scroll\nShape lines until scroll\nGet the current buffer dimensions (width, height)\nCreates a skew transform.\nSource of the image.\nGet the current attribute spans\nGet an iterator over the current attribute spans\nSplit attributes list at an offset\nSplit off new line at index\nCursor indicating start of change\nStart index of cluster in original line\nStart collecting change\nSet Stretch\nSet Style\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet the current tab width\nGet the current <code>tab_width</code>\nTakes the buffered value if in state <code>Self::Unused</code>.\nTakes the cached value if in state <code>Self::Used</code>.\nGet current text\nThe original text line\nText to be inserted or deleted\nReturns a new transform that represents the application of …\nReturns a new transform that represents this transform …\nReturns a new transform that represents this transform …\nReturns a new transform that represents this transform …\nReturns the angle in degrees.\nReturns a numeric representation of a width.\nReturns the angle in radians.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nVertical offset with respect to the origin specified when …\nReturns the result of a transformation matrix applied to …\nReturns the result of applying this transform to a point.\nReturns the result of applying this transform to a vector.\nCreates a translation transform.\nRemove anything in the cache with an age older than …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the associated verb for the command.\nPixel offset from the start of the [<code>BufferLine</code>]. This will …\nWidth of hitbox\nWidth of the line\nSet Weight\nGet the width of the <code>ShapeGlyph</code> in pixels, either using …\nGet the width of the <code>ShapeWord</code> in pixels, using the …\nWidth in pixels.\nGet the internal <code>Buffer</code>\nGet the internal <code>Buffer</code>\nGet the internal <code>Buffer</code>\nGet the internal <code>Buffer</code>, mutably\nGet the internal <code>Buffer</code>, mutably\nGet the internal <code>Buffer</code>, mutably\nGet the internal <code>Buffer</code>, mutably\nEnumerate pixels in an Image, use <code>with_image</code> for better …\nGet the current <code>Wrap</code>\nX offset of hitbox\nInteger component of X offset in line\nBinning of fractional X offset\nX offset in line\nY offset of hitbox\nInteger component of Y offset in line\nBinning of fractional Y offset\nY offset in line\nA font’s raw data, typically backed by a Vec.\nGlyphs in cursive fonts generally use a more informal …\nA font database.\nA single font face info.\nA font family.\nFantasy fonts are primarily decorative or expressive fonts …\nA font’s path.\nA unique per database face ID.\nA form that is generally cursive in nature.\nA <code>Name</code> language.\nThe sole criterion of a monospace font is that all glyphs …\nThe name of a font family of choice.\nA face that is neither italic not obliqued.\nA typically-sloped version of the regular face.\nA database query.\nGlyphs in sans-serif fonts, as the term is used in CSS, …\nSerif fonts represent the formal text style for a script.\nA font’s raw data originating from a shared file mapping.\nA font source.\nA face width.\nAllows italic or oblique faces to be selected.\nSpecifies the weight of glyphs in the font, their degree …\nCreates a dummy ID.\nSelects a <code>FaceInfo</code> by <code>id</code>.\nReturns font face storage and the face index by <code>ID</code>.\nReturns an iterator over the internal storage.\nA list of family names.\nA prioritized list of font family names or generic family …\nReturns the generic family name or the <code>Family::Name</code> itself.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn unique ID.\nA face index in the <code>source</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>Database</code> contains no font faces.\nReturns the number of font faces in the <code>Database</code>.\nLoads a font data into the <code>Database</code>.\nLoads a font file into the <code>Database</code>.\nLoads a font from the given source into the <code>Database</code> and …\nLoads font files from the selected directory into the …\nAttempts to load system fonts.\nTransfers ownership of shared font data back to the font …\nMakes the font data that backs the specified face id …\nIndicates that the font face is monospaced.\nCreate a new, empty <code>Database</code>.\nA PostScript name.\nReturns the primary language.\nPushes a user-provided <code>FaceInfo</code> to the database.\nPerforms a CSS-like query and returns the best matched …\nReturns a language region.\nRemoves a font face by <code>id</code> from the database.\nSets the family that will be used by <code>Family::Cursive</code>.\nSets the family that will be used by <code>Family::Fantasy</code>.\nSets the family that will be used by <code>Family::Monospace</code>.\nSets the family that will be used by <code>Family::SansSerif</code>.\nSets the family that will be used by <code>Family::Serif</code>.\nA font source.\nA font face stretch.\nSelects a normal, condensed, or expanded face from a font …\nA font face style.\nAllows italic or oblique faces to be selected.\nA font face weight.\nSpecifies the weight of glyphs in the font, their degree …\nExecutes a closure with a font’s data.\nIndicates that special handling of the beginning of text …\nText is set vertically from bottom to top.\nA cluster level.\nFlags for buffers.\nIndicates that a dotted circle should not be inserted in …\nDefines the direction in which text is to be read.\nIndicates that special handling of the end of text …\nA font face handle.\nA feature tag with an accompanying range specifying on …\nSerialize glyph extents.\nSerialize glyph flags.\nA buffer that contains the results of the shaping process.\nA glyph info.\nHolds the positions of the glyph in both horizontal and …\nInitial, unset direction.\nA script language.\nText is set horizontally from left to right.\nDo not serialize glyph advances, glyph offsets will …\nDo not serialize glyph cluster.\nDo no serialize glyph name.\nDo not serialize glyph position information.\nIndicates that characters with <code>Default_Ignorable</code> Unicode …\nIndicates that the <code>UNSAFE_TO_CONCAT</code> glyph-flag should be …\nIndicates that characters with <code>Default_Ignorable</code> Unicode …\nText is set horizontally from right to left.\nA text script.\nFlags used for serialization with a <code>BufferSerializer</code>.\nA reusable plan for shaping a text buffer.\nText is set vertically from top to bottom.\nA buffer that contains an input string ready for shaping.\nIndicates that the shape() call and its variants should …\nA font variation.\nAppends a character to a buffer with the given cluster …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nReturns the language as a string.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nClear the contents of the buffer.\nClears the content of the glyph buffer and returns an empty\nAn index to the start of the grapheme cluster in the …\nRetrieve the cluster level of the buffer.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the <code>Buffer</code>’s text direction.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet the flags for this buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nCreates a new [<code>Face</code>] from <code>ttf_parser::Face</code>.\nConverts an ISO 15924 script tag to a corresponding <code>Script</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nCreates a new <code>Face</code> from data.\nParses a <code>Feature</code> form a string.\nA selected glyph.\nGet the glyph infos.\nGet the glyph positions.\nGuess the segment properties (direction, language, script) …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if the buffer contains no elements.\nReturns <code>true</code> if the buffer contains no elements.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nGet the buffer language.\nReturns the length of the data of the buffer.\nReturns the length of the data of the buffer.\nCreate a new <code>UnicodeBuffer</code>.\nReturns a plan that can be used for shaping any buffer …\nCreate a new <code>Feature</code> struct.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPushes a string to a buffer.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nResets clusters.\nPredefined scripts.\nGet the ISO15924 script tag.\nConverts the glyph buffer content into a string.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet the cluster level of the buffer.\nSet the text direction of the <code>Buffer</code>’s contents.\nSet the flags for this buffer.\nSet the buffer language.\nSets pixels per EM.\nSets point size per EM.\nSets the post-context for this buffer.\nSets the pre-context for this buffer.\nSet the script from an ISO15924 tag.\nSets font variations.\nShapes the buffer content using provided font and features.\nShapes the buffer content using the provided font and plan.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns script’s tag.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns face’s units per EM.\nIndicates that if input text is broken at the beginning of …\nHow much the line advances after drawing this glyph when …\nHow much the glyph moves on the X-axis before drawing it, …\nHow much the line advances after drawing this glyph when …\nHow much the glyph moves on the Y-axis before drawing it, …\nA grayscale bitmap with 2 bits per pixel.\nA packed grayscale bitmap with 2 bits per pixel.\nA grayscale bitmap with 4 bits per pixel.\nA packed grayscale bitmap with 4 bits per pixel.\nA grayscale bitmap with 8 bits per pixel.\nA monochrome bitmap.\nA packed monochrome bitmap.\nA color bitmap with 32 bits per pixel.\nA list of errors that can occur during a CFF glyph …\nA font face.\nThe face index is larger than the number of faces in the …\nA list of font face parsing errors.\nParsed face tables.\nA 32-bit signed fixed-point number (16.16).\nA trait for parsing raw binary data of fixed size.\nA type-safe wrapper for glyph ID.\nA form that is generally cursive in nature.\nA <code>Name</code> language.\nA slice-like container that converts internal binary data …\nA slice-like container that converts internal binary data …\nAn iterator over <code>LazyArray16</code>.\nAn iterator over <code>LazyArray32</code>.\nA line metrics.\nAn attempt to read out of bounds detected.\nThe <code>head</code> table is missing or malformed.\nThe <code>hhea</code> table is missing or malformed.\nThe <code>maxp</code> table is missing or malformed.\nA face that is neither italic not obliqued.\nA variation coordinate in a normalized coordinate system.\nA typically-sloped version of the regular face.\nA trait for glyph outline construction.\nFace permissions.\nA platform ID.\nA glyph’s raster image.\nA glyph raster image format.\nA raw font face.\nA list of all supported tables as raw data.\nA rectangle.\nA rectangle described by the left-lower and upper-right …\nA RGBA color in the sRGB color space.\nObject’s raw data size.\nA script metrics used by subscript and superscript.\nA face style.\nA raw table record.\nA 4-byte tag.\nAn affine transform.\nUnicode Ranges.\nFace data must start with <code>0x00010000</code>, <code>0x74727565</code>, …\nA font variation value.\nA variation axis.\nA face weight.\nA face width.\nThe ‘a’ component of the transform.\nAn Anchor Point Table implementation.\nThis module contains Apple Advanced Typography Layout …\nReturns tag value as <code>u32</code> number.\nReturns a horizontal face ascender.\nAn Axis Variations Table implementation.\nAn axis tag name.\nThe ‘b’ component of the transform.\nPerforms a binary search by specified <code>key</code>.\nPerforms a binary search by specified <code>key</code>.\nPerforms a binary search using specified closure.\nPerforms a binary search using specified closure.\nThe ‘c’ component of the transform.\nReturns face’s capital height.\nA Color Bitmap Data Table implementation.\nA Color Bitmap Location Table implementation.\nA Compact Font Format Table implementation.\nA Compact Font Format 2 Table implementation.\nAppends a ClosePath segment.\nA Character to Glyph Index Mapping Table implementation.\nReturns the number of palettes stored in the <code>COLR</code>+<code>CPAL</code> …\nA Color Table implementation.\nCombines two transforms with each other.\nChecks if ranges contain the specified character.\nA Color Palette Table implementation.\nAppends a CurveTo segment.\nThe ‘d’ component of the transform.\nA raw image data. It’s up to the caller to decode it.\nThe input font file data.\nReturns a horizontal face descender.\nThe ‘e’ component of the transform.\nThe ‘f’ component of the transform.\nA Feature Name Table implementation.\nReturns the number of fonts stored in a TrueType font …\nAn image format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new coordinate.\nCreates a new coordinate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Tag</code> from bytes.\nCreates a <code>Tag</code> from bytes.\nCreates a new <code>Face</code> from provided <code>RawFaceTables</code>.\nCreates a new <code>RawFace</code> from a raw data.\nCreates a new <code>Face</code> from a raw data.\nA Font Variations Table implementation.\nA Glyph Definition Table implementation.\nReturns a value at <code>index</code>.\nReturns a value at <code>index</code>.\nReturns the coordinate value as f2.14.\nReturns a bounding box that large enough to enclose any …\nA Glyph Data Table implementation.\nReturns a tight glyph bounding box.\nReturns glyph’s horizontal advance.\nReturns glyph’s horizontal side bearing.\nResolves a Glyph ID for a code point.\nResolves a Glyph ID for a glyph name.\nReturns glyph’s name.\nReturns a reference to a glyph’s raster image.\nReturns a reference to a glyph’s SVG image.\nResolves a variation of a Glyph ID from two code points.\nReturns glyph’s vertical advance.\nReturns glyph’s vertical side bearing.\nReturns glyph’s vertical origin according to Vertical …\nA Glyph Positioning Table implementation.\nA Glyph Substitution Table implementation.\nA Glyph Variations Table implementation.\nChecks that face has non-default variation coordinates.\nA Font Header Table implementation.\nReturns rect’s height.\nReturns face’s height.\nImage height.\nA Horizontal Header Table implementation.\nA Horizontal/Vertical Metrics Table implementation.\nA Horizontal/Vertical Metrics Variations Table …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that face is marked as <em>Bold</em>.\nReturns <code>true</code> if the glyph can be colored/painted using the …\nChecks whether a transform is the identity transform.\nChecks if array is empty.\nChecks if the array is empty.\nChecks that face is marked as <em>Italic</em>.\nChecks that face is marked as <em>Monospaced</em>.\nChecks if tag is null / <code>[0, 0, 0, 0]</code>.\nChecks that face is marked as <em>Oblique</em>.\nChecks if the face allows outline data to be embedded.\nChecks that face is marked as <em>Regular</em>.\nChecks if the face allows embedding a subset, further …\nChecks that face is variable.\nReturns face’s italic angle.\nA Kerning Table implementation.\nAn Extended Kerning Table implementation.\nReturns the last value.\nReturns array’s length.\nReturns array’s length.\nReturns a horizontal face line gap.\nAppends a LineTo segment.\nAn Index to Location Table implementation.\nA Math Table implementation.\nA Maximum Profile Table implementation.\nAn Extended Glyph Metamorphosis Table implementation.\nAppends a MoveTo segment.\nA Metrics Variations Table implementation.\nA Naming Table implementation.\nA list of name ID’s.\nAn axis name in the <code>name</code> table.\nReturns a list of names.\nCreates a new <code>LazyArray</code>.\nCreates a new <code>LazyArray</code>.\nCreates a new transform with the specified components.\nCreates a new <code>RgbaColor</code>.\nCreates a new translation transform.\nReturns a total number of glyphs in the face.\nThis module contains OpenType Layout supplementary tables …\nA OS/2 and Windows Metrics Table implementation.\nOutlines a glyph and returns its tight bounding box.\nPaints a color glyph from the <code>COLR</code> table.\nParses an object from a raw data.\nCreates a new <code>RawFace</code> from a raw data.\nCreates a new <code>Face</code> from a raw data.\nReturns face permissions.\nA pixels per em of the selected strike.\nLine position.\nA PostScript Table implementation.\nReturns the primary language.\nAppends a QuadTo segment.\nReturns a <code>RangeRecord</code> for a glyph.\nReturns the <code>RawFace</code> used to create this <code>Face</code>.\nReturns a language region.\nA Standard Bitmap Graphics Table implementation.\nSets a variation axis coordinate.\nReturns sub-array.\nReturns face’s strikeout metrics.\nReturns face style.\nReturns face’s subscript metrics.\nReturns face’s superscript metrics.\nAn SVG Table implementation.\nReturns the raw data of a selected table.\nReturns the raw data of a selected table.\nAn array of table records.\nReturns low-level face tables.\nLine thickness.\nReturns tag as 4-element byte array.\nReturns tag as 4-element byte array.\nReturns a numeric representation of a weight.\nReturns a numeric representation of a width.\nA Tracking Table implementation.\nReturns a horizontal typographic face ascender.\nReturns a horizontal typographic face descender.\nReturns a horizontal typographic face line gap.\nReturns face’s underline metrics.\nReturns Unicode Ranges.\nReturns face’s units per EM.\nAn axis value.\nReturns an iterator over variation axes.\nReturns the current normalized variation coordinates.\nReturns a vertical face ascender.\nReturns a vertical face descender.\nReturns a vertical face height.\nReturns a vertical face line gap.\nA Vertical Header Table implementation.\nA Vertical Origin Table implementation.\nReturns face’s weight.\nReturns rect’s width.\nReturns face’s width.\nImage width.\nHorizontal offset.\nReturns face’s x height.\nThe horizontal maximum of the rect.\nThe horizontal minimum of the rect.\nX offset.\nHorizontal face size.\nVertical offset.\nThe vertical maximum of the rect.\nThe vertical minimum of the rect.\nY offset.\nVertical face size.\nAn anchor point.\nAn Anchor Point Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nReturns a list of anchor points for the specified glyph.\nAn Extended State Table.\nA State Table entry.\nA lookup table.\nA legacy state entry used by StateTable.\nA State Table.\nA type-safe wrapper for a kerning value offset.\nPredefined classes.\nReturns a glyph class.\nReturns a glyph class.\nReturns a class entry.\nReturns a class entry.\nAdditional data.\nAdditional data.\nEntry flags.\nEntry flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf set, advance to the next glyph before going to the new …\nIf set, remember this glyph as the marked glyph.\nChecks that entry has an offset.\nIf set, push this glyph on the kerning stack.\nIf set, reset the kerning data (clear the stack).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns kerning at offset.\nProduces a new state.\nA new state.\nA new state.\nReturns the next offset.\nParses an Extended State Table from a stream.\nParses a lookup table from raw data.\nPredefined states.\nReturns a value associated with the specified glyph.\nReturns a value offset.\nAn axis value map.\nA list of segment maps.\nAn iterator over maps.\nAn Axis Variations Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA normalized coordinate value obtained using default …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any segments.\nReturns the number of segments.\nMaps coordinates.\nParses a table from raw data.\nThe segment maps array — one segment map for each axis …\nThe modified, normalized coordinate value.\nA Color Bitmap Data Table.\nReturns the argument unchanged.\nReturns a raster image for the glyph.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nA Color Bitmap Location Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nParses a table from raw data.\nAn affine transformation matrix.\nA Compact Font Format Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the CID corresponding to a glyph ID.\nResolves a Glyph ID for a code point.\nReturns a glyph ID by a name.\nReturns a glyph name.\nReturns a glyph width.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a font transformation matrix.\nReturns a total number of glyphs in the font.\nOutlines a glyph.\nParses a table from raw data.\nA Compact Font Format 2 Table.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOutlines a glyph.\nParses a table from raw data.\nA character encoding subtable variant.\nGlyph was found in the variation encoding table.\nA result of a variation glyph mapping.\nA character encoding subtable.\nA format 0 subtable.\nA format 10 subtable.\nA format 12 subtable.\nA format 13 subtable.\nA format 14 subtable.\nA format 2 subtable.\nA format 4 subtable.\nA format 6 subtable.\nA list of subtables.\nAn iterator over <code>Subtables</code>.\nA Character to Glyph Index Mapping Table.\nGlyph should be looked in other, non-variation tables.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for each codepoint defined in this table.\nCalls <code>f</code> for all codepoints contained in this subtable.\nSubtable encoding.\nFirst character code covered.\nFirst character code of subrange.\nA subtable format.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a subtable at an index.\nJust a list of 256 8bit glyph IDs.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nReturns a glyph index for a code point.\nMaps a character to a glyph ID.\nResolves a variation of a glyph ID from two code points.\nArray of glyph indices for the character codes covered.\nArray of glyph indexes for character codes in the range.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any subtables.\nChecks that the current encoding is Unicode compatible.\nReturns the number of subtables.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a subtable from raw data.\nParses a table from raw data.\nSubtable platform.\nA list of subtables.\nThe composite mode ‘Clear’.\nA ClipBox.\nThe composite mode ‘Color’.\nThe composite mode ‘ColorBurn’.\nThe composite mode ‘ColorDodge’.\nA gradient extend.\nA composite mode\nThe composite mode ‘Darken’.\nThe composite mode ‘Destination’.\nThe composite mode ‘DestinationAtop’.\nThe composite mode ‘DestinationIn’.\nThe composite mode ‘DestinationOut’.\nThe composite mode ‘DestinationOver’.\nThe composite mode ‘Difference’.\nThe composite mode ‘Exclusion’.\nA gradient extend.\nAn iterator over stops of a gradient.\nThe composite mode ‘HardLight’.\nThe composite mode ‘Hue’.\nThe composite mode ‘Lighten’.\nA linear gradient\nA paint with a linear gradient.\nThe composite mode ‘Luminosity’.\nThe composite mode ‘Multiply’.\nThe composite mode ‘Overlay’.\nThe <code>Pad</code> gradient extend mode.\nA paint.\nA trait for color glyph painting.\nThe composite mode ‘Plus’.\nA radial gradient\nA paint with a radial gradient.\nThe <code>Reflect</code> gradient extend mode.\nThe <code>Repeat</code> gradient extend mode.\nThe composite mode ‘Saturation’.\nThe composite mode ‘Screen’.\nThe composite mode ‘SoftLight’.\nA paint with a solid color.\nThe composite mode ‘Source’.\nThe composite mode ‘SourceAtop’.\nThe composite mode ‘SourceIn’.\nThe composite mode ‘SourceOut’.\nThe composite mode ‘SourceOver’.\nA sweep gradient\nA paint with a sweep gradient.\nA Color Table.\nThe composite mode ‘Xor’.\nThe x of the center.\nThe y of the center.\nThe color of the color stop.\nWhether the table contains a definition for the given …\nThe end angle.\nThe extend.\nThe extend.\nThe extend.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the current table has version 0.\nOutline a glyph and store it.\nPaint the stored outline using the provided color.\nPaints the color glyph.\nParses a table from raw data.\nPop the last clip path.\nPop the last layer.\nPop the last transform.\nPush a new clip path using the currently stored outline.\nPush a new clip path using the clip box.\nPush a new layer with the given composite mode.\nPush a rotation transform.\nPush a scaling transform.\nPush a skewing transform.\nPush a transform.\nPush a translation transform.\nThe <code>r0</code> value.\nThe <code>r1</code> value.\nThe start angle.\nThe offset of the color stop.\nReturns an iterator over the stops of the linear gradient. …\nReturns an iterator over the stops of the radial gradient. …\nReturns an iterator over the stops of the sweep gradient. …\nThe <code>x0</code> value.\nThe <code>x0</code> value.\nThe <code>x1</code> value.\nThe <code>x1</code> value.\nThe <code>x2</code> value.\nThe horizontal maximum of the rect.\nThe horizontal minimum of the rect.\nThe <code>y0</code> value.\nThe <code>y0</code> value.\nThe <code>y1</code> value.\nThe <code>y1</code> value.\nThe <code>y2</code> value.\nThe vertical maximum of the rect.\nThe vertical minimum of the rect.\nA Color Palette Table.\nReturns the argument unchanged.\nReturns the color at the given index into the given …\nCalls <code>U::from(self)</code>.\nReturns the number of palettes.\nParses a table from raw data.\nA feature names.\nA list fo feature names.\nAn iterator over <code>FeatureNames</code>.\nA setting name.\nA Feature Name Table.\nThe index of the default setting in the <code>setting_names</code>.\nThe feature’s exclusive settings. If set, the feature …\nThe feature’s ID.\nFinds a feature name by ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a feature name at an index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if there are any feature names.\nReturns the number of feature names.\nThe <code>name</code> table index for the feature’s name in a …\nThe <code>name</code> table index for the feature’s name in a …\nA list of feature names. Sorted by <code>FeatureName.feature</code>.\nParses a table from raw data.\nThe setting.\nThe feature’s setting names.\nA Font Variations Table.\nA variation axis.\nA list of variation axes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn axis name in the <code>name</code> table.\nParses a table from raw data.\nA glyph class.\nA Glyph Definition Table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns glyph’s class according to Glyph Class …\nReturns glyph’s mark attachment class according to Mark …\nReturns glyph’s variation delta at a specified index …\nChecks that face has Glyph Class Definition Table.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks that glyph is a mark according to Mark Glyph Sets …\nParses a table from raw data.\nA Glyph Data Table.\nReturns the argument unchanged.")