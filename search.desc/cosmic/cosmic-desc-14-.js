searchState.loadedDescShard("cosmic", 14, "The default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the height of the <code>Container</code>.\nThe icon <code>Color</code> of the container.\nSet to true to ignore parent container bounds when …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the maximum height of the <code>Container</code> in pixels.\nSets the maximum width of the <code>Container</code>.\nSets the <code>Padding</code> of the <code>Container</code>.\nThe <code>Shadow</code> of the container.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Container</code>.\nThe text <code>Color</code> of the container.\nSets the width of the [<code>self.</code>].\nA container which aligns its children in a row.\nA pre-allocated <code>row</code>.\nA <code>row</code> that will be assigned a <code>Vec</code> of children.\nAppearance of the segmented button.\nConstructs a new item for the <code>ModelBuilder</code>.\nA unique ID for an item in the <code>Model</code>.\nA newly-inserted item which may have additional actions …\nHorizontal <code>SegmentedButton</code>.\nThe iced identifier of a segmented button.\nAppearance of an item in the segmented button.\nAppearance of an item based on its status.\nThe model held by the application, containing the unique …\nA builder for a <code>Model</code>.\n<code>Model&lt;MultiSelect&gt;</code> permits multiple keys to be active at a …\nMulti-select variant of an <code>EntityMut</code>.\nA model for multi-select button selection.\nAssociates extra data with an external secondary map.\nA conjoined group of items that function together as a …\nIsolates variant-specific behaviors from <code>SegmentedButton</code>.\nDescribes a type that has selectable items.\n<code>Model&lt;SingleSelect&gt;</code> Ensures that only one key may be …\nSingle-select variant of an <code>EntityMut</code>.\nA model for single-select button selection.\nAssociates extra data with an external sparse secondary …\nThe supported style of the <code>StyleSheet</code>.\nDefines the <code>Appearance</code> of a segmented button.\nVertical <code>SegmentedButton</code>.\nActivate an item.\nActivates the newly-inserted item.\nActivates the newly-inserted item.\nActivates the item in the model.\nActivates the item at the given position, returning true …\nThe ID of the active item.\nThe IDs of the active items.\nGet an immutable reference to the data associated with the …\nGet a mutable reference to the data associated with the …\nConsumes the builder and returns the model.\nCreates a builder for initializing a model.\nAlignment of button contents.\nDesired height of a button.\nPadding around a button.\nSpacing between icon and text in button.\nRemoves all items from the model.\nDefines that the close button should appear\nShows a close button for this item.\nShows or hides the item’s close button.\nThe icon used for the close button.\nCheck if an item exists in the map.\nAssigns extra data to the item.\nAssociates data with the item.\nGet an immutable reference to data associated with an item.\nGet a mutable reference to data associated with an item.\nRemoves a specific data type from the item.\nAssociates data with the item.\nDeactivate an item.\nDeactivates the item in the model.\nDeactivates the active item.\nWhether to place dividers between buttons.\nEnable or disable an item.\nGet the item that is located at a given position.\nA command that focuses a segmented item stored in a widget.\nDesired font for active tabs.\nDesired font for hovered tabs.\nDesired font for inactive tabs.\nSize of the font.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the drag id of the destination.\nDesired height of the widget.\nHorizontal implementation of the <code>SegmentedButton</code>.\nThe horizontal <code>Appearance</code> of the segmented button.\nDefines an icon for the item.\nDefine an icon for the item.\nImmutable reference to the icon associated with the item.\nRemoves the icon from an item.\nSets a new icon for an item.\nReturns the ID of the item that was inserted.\niced widget ID\nSpacing for each indent.\nInserts a new item and its associated data into the model.\nInserts a new item in the model.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the item is active.\nCheck if the given ID is the active ID.\nWhether the item should contain a close button.\nCheck if the item is enabled.\nIterates across items in the model in the order that they …\nGet number of items in the model.\nLineHeight of the font.\nMaximum width of a button.\nMinimum width of a button.\nCreates a custom <code>Id</code>.\nEmitted when a tab is pressed.\nEmitted when a tab close button is pressed.\nEmitted when a button is right-clicked.\nHandle the dnd drop event.\nHandle the dnd enter event.\nHandle the dnd leave event.\nEmitted when the middle mouse button is pressed on a …\nPadding of the whole widget.\nDefine the position of the newly-inserted item.\nDefine the position of the item.\nThe position of the item in the model.\nChange the position of an item in the model.\nSwap the position with another item in the model.\nSwap the position with another item in the model.\nSwap the position of two items in the model.\nRemoves an item from the model.\nScrolling switches focus between tabs.\nAssociates extra data with an external secondary map.\nAssociates extra data with an external secondary map.\nAssociates extra data with an external sparse secondary …\nAssociates extra data with an external sparse secondary …\nShow the close icon only when item is hovered.\nDesired spacing between items.\nStyle to draw the widget in.\nDefines the text for the item.\nDefines the text for the item.\nImmutable reference to the text assigned to the item.\nRemoves text from an item.\nSets new text for an item.\nCreates a unique <code>Id</code>.\nGet the appearance for this variant of the widget.\nCalculates the bounds for visible buttons.\nCalculates the layout of this variant.\nVertical implementation of the <code>SegmentedButton</code>.\nThe vertical <code>Appearance</code> of the segmented button.\nDesired width of the widget.\nCalls a function with the ID\nCalls a function with the ID without consuming the wrapper.\nA selection of multiple choices appearing as a conjoined …\nA selection of multiple choices appearing as a conjoined …\nA column with a predefined style for creating a settings …\nA builder for a settings item.\nCreates a builder for an item, beginning with the title.\nAssigns a control to the item.\nA description to display beneath the title.\nAssigns a control which flexes.\nA settings item aligned in a flex row\nA settings item aligned in a flex row\nReturns the argument unchanged.\nA custom icon to display before the text.\nCalls <code>U::from(self)</code>.\nA settings item aligned in a row\nA settings item aligned in a row\nDescribes the item being controlled.\nAdd a child element to the section’s list column.\nAdd a child element to the section’s list column, if <code>Some</code>…\nExtends the <code>Section</code> with the given children.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA section within a settings view column.\nDefine an optional title for the section.\nA section within a settings view column.\nA section with a pre-defined list column.\nThe <code>Slider</code> can be interacted with.\nThe appearance of slider breakpoints.\nThe theme catalog of a <code>Slider</code>.\nA circular handle.\nThe item class of the <code>Catalog</code>.\nThe <code>Slider</code> is being dragged.\nLinear gradient for the background of the rail includes an …\nThe appearance of the handle of a slider.\nThe shape of the handle of a slider.\nThe <code>Slider</code> is being hovered.\nStart and end colors of the rail\nThe appearance of a slider rail\nThe background color of the rail\nA rectangular shape.\nAn horizontal bar and a handle that selects a single value …\nThe possible status of a <code>Slider</code>.\nThe appearance of a slider.\nA styling function for a <code>Slider</code>.\nThe <code>Background</code> of the handle.\nThe backgrounds of the rail of the slider.\nThe border of the rail.\nThe border <code>Color</code> of the handle.\nThe border width of the handle.\nThe appearance of breakpoints.\nThe color of the slider breakpoint.\nThe default style of a <code>Slider</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe appearance of the <code>Handle</code> of the slider.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe colors of the rail of the slider.\nThe shape of the handle.\nThe <code>Style</code> of a class with the given status.\nThe width of the stroke of a slider rail.\nChanges the <code>HandleShape</code> of the <code>Style</code> to a circle with the …\nThe border radius of the corners of the rectangle.\nThe height of the rectangle.\nThe radius of the circle.\nThe width of the rectangle.\nLet the widget determin the angle of the gradient\nthe linear gradient of the slider\nHorizontal spin button widget.\nVertical spin button widget.\nDefines the [<code>Appearance</code>] of a cards.\nAppearance of the cards.\nThe default [<code>Appearance</code>] of the cards.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe theme catalog of an <code>Svg</code>.\nThe item class of the <code>Catalog</code>.\nA handle of Svg data.\nThe <code>Svg</code> is being hovered.\nThe <code>Svg</code> is idle.\nThe possible status of an <code>Svg</code>.\nThe appearance of an <code>Svg</code>.\nA styling function for an <code>Svg</code>.\nA vector graphics image.\nThe <code>Color</code> filter of an <code>Svg</code>.\nReturns a reference to the SVG <code>Data</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an SVG <code>Handle</code> from raw bytes containing either an …\nCreates an SVG <code>Handle</code> pointing to the vector image of the …\nReturns the unique identifier of the <code>Handle</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>Style</code> of a class with the given status.\nA collection of tabs for developing a tabbed interface.\nA collection of tabs for developing a tabbed interface.\nUnique key type for items in the table\nActivates the item in the model.\nActivates the item at the given position, returning true …\nThe ID of the active item.\nThe IDs of the active items.\nGet an immutable reference to the data associated with the …\nGet a mutable reference to the data associated with the …\nRemoves all items from the model.\nCheck if an item exists in the map.\nGet an immutable reference to data associated with an item.\nGet a mutable reference to data associated with an item.\nRemoves a specific data type from the item.\nAssociates data with the item.\nDeactivates the item in the model.\nDeactivates the active item.\nEnable or disable an item.\nGet the item that is located at a given position.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the sort data\nInserts a new item in the model.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the given ID is the active ID.\nCheck if the item is enabled.\nGet an immutable reference to data associated with an item.\nGet a mutable reference to data associated with an item.\nAssociates data with the item.\nIterates across items in the model in the order that they …\nThe position of the item in the model.\nChange the position of an item in the model.\nSwap the position of two items in the model.\nRemoves an item from the model.\nDescribes logic specific to the single-select and …\nSorts items in the model, this should be called before it …\nImplementation of std::fmt::Display allows user to …\nFunction that gets the width of the data\nA newly-inserted item which may have additional actions …\nActivates the newly-inserted item.\nAssociates data with the item.\nReturns the argument unchanged.\nReturns the ID of the item that was inserted.\nCalls <code>U::from(self)</code>.\nDefines the text for the item.\nDefine the position of the item.\nSwap the position with another item in the model.\nAssociates extra data with an external secondary map.\nAssociates extra data with an external sparse secondary …\nCalls a function with the ID without consuming the wrapper.\n<code>Model&lt;MultiSelect&gt;</code> permits multiple keys to be active at a …\nDescribes a type that has selectable items.\n<code>Model&lt;SingleSelect&gt;</code> Ensures that only one key may be …\nActivate an item.\nDeactivate an item.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the item is active.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA bunch of text.\nAvailable presets for text typography\n<code>Text</code> widget with the Body typography preset.\n<code>Text</code> widget with the Caption typography preset.\n<code>Text</code> widget with the Caption Heading typography preset.\nReturns the argument unchanged.\n<code>Text</code> widget with the Heading typography preset.\nCalls <code>U::from(self)</code>.\n<code>Text</code> widget with the Monotext typography preset.\nCreates a new <code>Text</code> widget with the provided content.\n<code>Text</code> widget with the Title 1 typography preset.\n<code>Text</code> widget with the Title 2 typography preset.\n<code>Text</code> widget with the Title 3 typography preset.\n<code>Text</code> widget with the Title 4 typography preset.\nAn interaction with an <code>Editor</code>.\nThe <code>TextEditor</code> can be interacted with.\nDelete the previous character.\nDelete the previous character.\nA binding to an action in the <code>TextEditor</code>.\nThe theme catalog of a <code>TextEditor</code>.\nThe item class of the <code>Catalog</code>.\nClick the <code>Editor</code> at the given <code>Point</code>.\nThe content of a <code>TextEditor</code>.\nCopy the selection of the <code>TextEditor</code>.\nProduce the given message.\nCut the selection of the <code>TextEditor</code>.\nDelete the next character.\nDelete the next character.\nThe <code>TextEditor</code> cannot be interacted with.\nMove to the end of the text.\nMove to the start of the text.\nMove down.\nDrag the mouse on the <code>Editor</code> to the given <code>Point</code>.\nAn action that edits text.\nPerform an <code>Edit</code>.\nMove to the end of the line.\nBreak the current line.\nBreak the current line.\nThe <code>TextEditor</code> is focused.\nMove to the start of the line.\nThe <code>TextEditor</code> is being hovered.\nThe identifier of a <code>TextEditor</code>.\nInsert the given character.\nInsert the given character.\nA key press.\nMove left.\nA cursor movement.\nApply a <code>Motion</code>.\nApply a <code>Motion</code>.\nMove to the start of the next window.\nMove to the start of the previous window.\nPaste the given text.\nPaste the clipboard contents in the <code>TextEditor</code>.\nMove right.\nScroll the <code>Editor</code> a certain amount of lines.\nSelect text with a given <code>Motion</code>.\nSelect text with a given <code>Motion</code>.\nSelect the entire buffer.\nSelect the entire buffer.\nSelect the line at the current cursor.\nSelect the line at the current cursor.\nSelect the word at the current cursor.\nSelect the word at the current cursor.\nA sequence of bindings to execute.\nThe state of a <code>TextEditor</code>.\nThe possible status of a <code>TextEditor</code>.\nThe appearance of a text input.\nA styling function for a <code>TextEditor</code>.\nA multi-line text input.\nUnfocus the <code>TextEditor</code>.\nMove up.\nMove to the left boundary of a word.\nMove to the right boundary of a word.\nThe <code>Background</code> of the text input.\nThe <code>Border</code> of the text input.\nReturns the current cursor position of the <code>Content</code>.\nThe default style of a <code>TextEditor</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the <code>Direction</code> of the <code>Motion</code>.\nProduces a <code>Task</code> that focuses the <code>TextEditor</code> with the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the default <code>Binding</code> for the given key press.\nThe <code>Color</code> of the icon of the text input.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>Action</code> is an editing action.\nReturns whether the <code>TextEditor</code> is currently focused or not.\nThe key pressed.\nReturns the text of the line at the given index, if it …\nReturns the amount of lines of the <code>Content</code>.\nReturns an iterator of the text of the lines in the <code>Content</code>…\nThe state of the keyboard modifiers.\nCreates an empty <code>Content</code>.\nPerforms an <code>Action</code> on the <code>Content</code>.\nThe <code>Color</code> of the placeholder of the text input.\nReturns the selected text of the <code>Content</code>.\nThe <code>Color</code> of the selection of the text input.\nThe current <code>Status</code> of the <code>TextEditor</code>.\nThe <code>Style</code> of a class with the given status.\nReturns the text of the <code>Content</code>.\nThe text produced by the key press.\nThe <code>Color</code> of the value of the text input.\nWidens the <code>Motion</code>, if possible.\nCreates a <code>Content</code> with the given text.\nThe amount of lines to scroll.\nThe appearance of a text input.\nThe state of a <code>TextInput</code>.\nThe supported style of the <code>StyleSheet</code>.\nA set of rules that dictate the style of a text input.\nA field that can be filled with text.\nA string which can be sent to the clipboard or …\nProduces the style of an active text input.\nThe <code>Background</code> of the text input.\nThe border <code>Color</code> of the text input.\nThe border offset\nThe border radius of the text input.\nThe border width of the text input.\nTrack the cursor of a text input.\nReturns the <code>Cursor</code> of the <code>TextInput</code>.\nProduces the style of a disabled text input.\nDraws the <code>TextInput</code> with the given <code>Renderer</code>, overriding its\nA text label which can transform into a text input on …\nProduces the style of an errored text input.\nProduces a <code>Task</code> that focuses the <code>TextInput</code> with the given …\nFocuses the <code>TextInput</code>.\nProduces the style of a focused text input.\nCreates a new <code>State</code>, representing a focused <code>TextInput</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProduces the style of an hovered text input.\nProduces the style of an hovered text input.\nThe icon <code>Color</code> of the text input.\nCreates a new inline <code>TextInput</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>TextInput</code> is currently focused or not.\nThe label <code>Color</code> of the text input.\nComputes the layout of a <code>TextInput</code>.\nComputes the current <code>mouse::Interaction</code> of the <code>TextInput</code>.\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to an arbitrary location.\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to the end of the input …\nProduces a <code>Task</code> that moves the cursor of the <code>TextInput</code> …\nMoves the <code>Cursor</code> of the <code>TextInput</code> to the front of the …\nCreates a new <code>State</code>, representing an unfocused <code>TextInput</code>.\nThe placeholder text <code>Color</code>.\nCreates a new search <code>TextInput</code>.\nCreates a new secure <code>TextInput</code>.\nProduces a <code>Task</code> that selects all the content of the …\nSelects all the content of the <code>TextInput</code>.\nThe selected fill <code>Color</code> of the text input.\nReturns the current value of the selected text in the …\nThe text <code>Color</code> of the text input.\nThe text <code>Color</code> of the text input.\nCreates a new <code>TextInput</code>.\nProcesses an <code>Event</code> and updates the <code>State</code> of a <code>TextInput</code> …\nThe cursor of a text input.\nCursor without a selection\nCursor selecting a range of text\nThe state of a <code>Cursor</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the current selection of the <code>Cursor</code> for the given …\nReturns the <code>State</code> of the <code>Cursor</code>.\nThe end of the selection\nThe start of the selection\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe value of a <code>TextInput</code>.\nReturns the argument unchanged.\nInserts a new <code>char</code> at the given grapheme <code>index</code>.\nInserts a bunch of graphemes at the given grapheme <code>index</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the <code>Value</code> is empty or not.\nReturns the total amount of graphemes in the <code>Value</code>.\nCreates a new <code>Value</code> from a string slice.\nReturns the position of the next end of a word from the …\nReturns the position of the previous start of a word from …\nRemoves the grapheme at the given <code>index</code>.\nRemoves the graphemes from <code>start</code> to <code>end</code>.\nReturns a new <code>Value</code> with all its graphemes replaced with …\nReturns a new <code>Value</code> containing the graphemes from <code>start</code> …\nReturns a new <code>Value</code> containing the graphemes until the …\nAction that can be triggered by the user.\nDuration for the <code>Toast</code>\nRepresent the data used to display a <code>Toast</code>\nSet the <code>Action</code> of this <code>Toast</code>\nSet the <code>Duration</code> of this <code>Toast</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>Toast</code> with the provided message.\nAdd a new <code>Toast</code>\nRemove a <code>Toast</code>\nCreate a new Toaster widget.\nThe tooltip will appear on the bottom of the widget.\nThe tooltip will follow the cursor.\nThe tooltip will appear on the left of the widget.\nThe position of the tooltip. Defaults to following the …\nThe tooltip will appear on the right of the widget.\nThe tooltip will appear on the top of the widget.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>Slider</code> can be interacted with.\nThe theme catalog of a <code>Slider</code>.\nA circular handle.\nThe item class of the <code>Catalog</code>.\nThe <code>Slider</code> is being dragged.\nLinear gradient for the background of the rail includes an …\nThe appearance of the handle of a slider.\nThe shape of the handle of a slider.\nThe <code>Slider</code> is being hovered.\nStart and end colors of the rail\nThe background color of the rail\nA rectangular shape.\nThe possible status of a <code>Slider</code>.\nThe appearance of a slider.\nA styling function for a <code>Slider</code>.\nAn vertical bar and a handle that selects a single value …\nThe <code>Background</code> of the handle.\nThe border <code>Color</code> of the handle.\nThe border width of the handle.\nThe appearance of breakpoints.\nThe default style of a <code>Slider</code>.\nThe default class produced by the <code>Catalog</code>.\nThe appearance of the <code>Handle</code> of the slider.\nThe colors of the rail of the slider.\nThe shape of the handle.\nThe <code>Style</code> of a class with the given status.\nThe border radius of the corners of the rectangle.\nThe height of the rectangle.\nThe radius of the circle.\nThe width of the rectangle.\nLet the widget determin the angle of the gradient\nthe linear gradient of the slider\nA custom button that has the desired default spacing and …\nThe message to emit on button press.\nPanics\nPanics")